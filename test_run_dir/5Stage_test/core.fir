;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit core : 
  module IF_ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : SInt<32>, flip pc4_in : UInt<32>, flip SelectedPC : SInt<32>, flip SelectedInstr : UInt<32>, pc_out : SInt<32>, pc4_out : UInt<32>, SelectedPC_out : SInt<32>, SelectedInstr_out : UInt<32>}
    
    reg Pc_In : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 18:39]
    reg Pc4_In : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 19:39]
    reg S_pc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 20:39]
    reg S_instr : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 21:39]
    Pc_In <= io.pc_in @[IF_ID.scala 23:11]
    Pc4_In <= io.pc4_in @[IF_ID.scala 24:11]
    S_pc <= io.SelectedPC @[IF_ID.scala 25:9]
    S_instr <= io.SelectedInstr @[IF_ID.scala 26:12]
    io.pc_out <= Pc_In @[IF_ID.scala 28:29]
    io.pc4_out <= Pc4_In @[IF_ID.scala 29:29]
    io.SelectedPC_out <= S_pc @[IF_ID.scala 30:29]
    io.SelectedInstr_out <= S_instr @[IF_ID.scala 31:29]
    
  module ID_EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_in : UInt<5>, flip rs2_in : UInt<5>, flip rs1_data_in : SInt<32>, flip rs2_data_in : SInt<32>, flip imm : SInt<32>, flip rd_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip ctrl_MemWr_in : UInt<1>, flip ctrl_Branch_in : UInt<1>, flip ctrl_MemRd_in : UInt<1>, flip ctrl_Reg_W_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip ctrl_AluOp_in : UInt<3>, flip ctrl_OpA_in : UInt<2>, flip ctrl_OpB_in : UInt<1>, flip ctrl_nextpc_in : UInt<2>, flip IFID_pc4_in : UInt<32>, rs1_out : UInt<5>, rs2_out : UInt<5>, rs1_data_out : SInt<32>, rs2_data_out : SInt<32>, rd_out : UInt<5>, imm_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, ctrl_MemWr_out : UInt<1>, ctrl_Branch_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_Reg_W_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_AluOp_out : UInt<3>, ctrl_OpA_out : UInt<2>, ctrl_OpB_out : UInt<1>, ctrl_nextpc_out : UInt<2>, IFID_pc4_out : UInt<32>}
    
    reg io_rs1_out_REG : UInt, clock @[ID_EX.scala 46:36]
    io_rs1_out_REG <= io.rs1_in @[ID_EX.scala 46:36]
    io.rs1_out <= io_rs1_out_REG @[ID_EX.scala 46:25]
    reg io_rs2_out_REG : UInt, clock @[ID_EX.scala 47:36]
    io_rs2_out_REG <= io.rs2_in @[ID_EX.scala 47:36]
    io.rs2_out <= io_rs2_out_REG @[ID_EX.scala 47:25]
    reg io_rs1_data_out_REG : SInt, clock @[ID_EX.scala 48:36]
    io_rs1_data_out_REG <= io.rs1_data_in @[ID_EX.scala 48:36]
    io.rs1_data_out <= io_rs1_data_out_REG @[ID_EX.scala 48:25]
    reg io_rs2_data_out_REG : SInt, clock @[ID_EX.scala 49:36]
    io_rs2_data_out_REG <= io.rs2_data_in @[ID_EX.scala 49:36]
    io.rs2_data_out <= io_rs2_data_out_REG @[ID_EX.scala 49:25]
    reg io_imm_out_REG : SInt, clock @[ID_EX.scala 50:36]
    io_imm_out_REG <= io.imm @[ID_EX.scala 50:36]
    io.imm_out <= io_imm_out_REG @[ID_EX.scala 50:25]
    reg io_rd_out_REG : UInt, clock @[ID_EX.scala 51:36]
    io_rd_out_REG <= io.rd_in @[ID_EX.scala 51:36]
    io.rd_out <= io_rd_out_REG @[ID_EX.scala 51:25]
    reg io_func3_out_REG : UInt, clock @[ID_EX.scala 52:36]
    io_func3_out_REG <= io.func3_in @[ID_EX.scala 52:36]
    io.func3_out <= io_func3_out_REG @[ID_EX.scala 52:25]
    reg io_func7_out_REG : UInt<1>, clock @[ID_EX.scala 53:36]
    io_func7_out_REG <= io.func7_in @[ID_EX.scala 53:36]
    io.func7_out <= io_func7_out_REG @[ID_EX.scala 53:25]
    reg io_ctrl_MemWr_out_REG : UInt<1>, clock @[ID_EX.scala 54:36]
    io_ctrl_MemWr_out_REG <= io.ctrl_MemWr_in @[ID_EX.scala 54:36]
    io.ctrl_MemWr_out <= io_ctrl_MemWr_out_REG @[ID_EX.scala 54:25]
    reg io_ctrl_Branch_out_REG : UInt<1>, clock @[ID_EX.scala 55:36]
    io_ctrl_Branch_out_REG <= io.ctrl_Branch_in @[ID_EX.scala 55:36]
    io.ctrl_Branch_out <= io_ctrl_Branch_out_REG @[ID_EX.scala 55:25]
    reg io_ctrl_MemRd_out_REG : UInt<1>, clock @[ID_EX.scala 56:36]
    io_ctrl_MemRd_out_REG <= io.ctrl_MemRd_in @[ID_EX.scala 56:36]
    io.ctrl_MemRd_out <= io_ctrl_MemRd_out_REG @[ID_EX.scala 56:25]
    reg io_ctrl_Reg_W_out_REG : UInt<1>, clock @[ID_EX.scala 57:36]
    io_ctrl_Reg_W_out_REG <= io.ctrl_Reg_W_in @[ID_EX.scala 57:36]
    io.ctrl_Reg_W_out <= io_ctrl_Reg_W_out_REG @[ID_EX.scala 57:25]
    reg io_ctrl_MemToReg_out_REG : UInt<1>, clock @[ID_EX.scala 58:36]
    io_ctrl_MemToReg_out_REG <= io.ctrl_MemToReg_in @[ID_EX.scala 58:36]
    io.ctrl_MemToReg_out <= io_ctrl_MemToReg_out_REG @[ID_EX.scala 58:25]
    reg io_ctrl_AluOp_out_REG : UInt, clock @[ID_EX.scala 59:36]
    io_ctrl_AluOp_out_REG <= io.ctrl_AluOp_in @[ID_EX.scala 59:36]
    io.ctrl_AluOp_out <= io_ctrl_AluOp_out_REG @[ID_EX.scala 59:25]
    reg io_ctrl_OpA_out_REG : UInt, clock @[ID_EX.scala 60:36]
    io_ctrl_OpA_out_REG <= io.ctrl_OpA_in @[ID_EX.scala 60:36]
    io.ctrl_OpA_out <= io_ctrl_OpA_out_REG @[ID_EX.scala 60:25]
    reg io_ctrl_OpB_out_REG : UInt<1>, clock @[ID_EX.scala 61:36]
    io_ctrl_OpB_out_REG <= io.ctrl_OpB_in @[ID_EX.scala 61:36]
    io.ctrl_OpB_out <= io_ctrl_OpB_out_REG @[ID_EX.scala 61:25]
    reg io_ctrl_nextpc_out_REG : UInt, clock @[ID_EX.scala 62:36]
    io_ctrl_nextpc_out_REG <= io.ctrl_nextpc_in @[ID_EX.scala 62:36]
    io.ctrl_nextpc_out <= io_ctrl_nextpc_out_REG @[ID_EX.scala 62:25]
    reg io_IFID_pc4_out_REG : UInt, clock @[ID_EX.scala 63:36]
    io_IFID_pc4_out_REG <= io.IFID_pc4_in @[ID_EX.scala 63:36]
    io.IFID_pc4_out <= io_IFID_pc4_out_REG @[ID_EX.scala 63:25]
    
  module EX_MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_MEMRD : UInt<1>, flip IDEX_MEMWR : UInt<1>, flip IDEX_MEMTOREG : UInt<1>, flip IDEX_REG_W : UInt<1>, flip IDEX_rs2 : SInt<32>, flip IDEX_rd : UInt<5>, flip alu_out : SInt<32>, flip fun3in : UInt<3>, EXMEM_memRd_out : UInt<1>, EXMEM_memWr_out : UInt<1>, EXMEM_memToReg_out : UInt<1>, EXMEM_reg_w_out : UInt<1>, EXMEM_rs2_out : SInt<32>, EXMEM_rd_out : UInt<5>, EXMEM_alu_out : SInt<32>, fun3out : UInt<3>}
    
    reg io_EXMEM_memRd_out_REG : UInt<1>, clock @[EX_MEM.scala 26:39]
    io_EXMEM_memRd_out_REG <= io.IDEX_MEMRD @[EX_MEM.scala 26:39]
    io.EXMEM_memRd_out <= io_EXMEM_memRd_out_REG @[EX_MEM.scala 26:29]
    reg io_EXMEM_memWr_out_REG : UInt<1>, clock @[EX_MEM.scala 27:39]
    io_EXMEM_memWr_out_REG <= io.IDEX_MEMWR @[EX_MEM.scala 27:39]
    io.EXMEM_memWr_out <= io_EXMEM_memWr_out_REG @[EX_MEM.scala 27:29]
    reg io_EXMEM_memToReg_out_REG : UInt<1>, clock @[EX_MEM.scala 28:39]
    io_EXMEM_memToReg_out_REG <= io.IDEX_MEMTOREG @[EX_MEM.scala 28:39]
    io.EXMEM_memToReg_out <= io_EXMEM_memToReg_out_REG @[EX_MEM.scala 28:29]
    reg io_EXMEM_reg_w_out_REG : UInt<1>, clock @[EX_MEM.scala 29:39]
    io_EXMEM_reg_w_out_REG <= io.IDEX_REG_W @[EX_MEM.scala 29:39]
    io.EXMEM_reg_w_out <= io_EXMEM_reg_w_out_REG @[EX_MEM.scala 29:29]
    reg io_EXMEM_rs2_out_REG : SInt, clock @[EX_MEM.scala 30:39]
    io_EXMEM_rs2_out_REG <= io.IDEX_rs2 @[EX_MEM.scala 30:39]
    io.EXMEM_rs2_out <= io_EXMEM_rs2_out_REG @[EX_MEM.scala 30:29]
    reg io_EXMEM_rd_out_REG : UInt, clock @[EX_MEM.scala 31:39]
    io_EXMEM_rd_out_REG <= io.IDEX_rd @[EX_MEM.scala 31:39]
    io.EXMEM_rd_out <= io_EXMEM_rd_out_REG @[EX_MEM.scala 31:29]
    reg io_EXMEM_alu_out_REG : SInt, clock @[EX_MEM.scala 32:39]
    io_EXMEM_alu_out_REG <= io.alu_out @[EX_MEM.scala 32:39]
    io.EXMEM_alu_out <= io_EXMEM_alu_out_REG @[EX_MEM.scala 32:29]
    reg io_fun3out_REG : UInt, clock @[EX_MEM.scala 33:25]
    io_fun3out_REG <= io.fun3in @[EX_MEM.scala 33:25]
    io.fun3out <= io_fun3out_REG @[EX_MEM.scala 33:15]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip EXMEM_MEMTOREG : UInt<1>, flip EXMEM_REG_W : UInt<1>, flip EXMEM_MEMRD : UInt<1>, flip EXMEM_rd : UInt<5>, flip in_dataMem_out : SInt<32>, flip in_alu_out : SInt<32>, MEMWB_memToReg_out : UInt<1>, MEMWB_reg_w_out : UInt<1>, MEMWB_memRd_out : UInt<1>, MEMWB_rd_out : UInt<5>, MEMWB_dataMem_out : SInt<32>, MEMWB_alu_out : SInt<32>}
    
    reg io_MEMWB_memToReg_out_REG : UInt<1>, clock @[MEM_WR.scala 22:39]
    io_MEMWB_memToReg_out_REG <= io.EXMEM_MEMTOREG @[MEM_WR.scala 22:39]
    io.MEMWB_memToReg_out <= io_MEMWB_memToReg_out_REG @[MEM_WR.scala 22:29]
    reg io_MEMWB_reg_w_out_REG : UInt<1>, clock @[MEM_WR.scala 23:39]
    io_MEMWB_reg_w_out_REG <= io.EXMEM_REG_W @[MEM_WR.scala 23:39]
    io.MEMWB_reg_w_out <= io_MEMWB_reg_w_out_REG @[MEM_WR.scala 23:29]
    reg io_MEMWB_memRd_out_REG : UInt<1>, clock @[MEM_WR.scala 24:39]
    io_MEMWB_memRd_out_REG <= io.EXMEM_MEMRD @[MEM_WR.scala 24:39]
    io.MEMWB_memRd_out <= io_MEMWB_memRd_out_REG @[MEM_WR.scala 24:29]
    reg io_MEMWB_rd_out_REG : UInt, clock @[MEM_WR.scala 25:39]
    io_MEMWB_rd_out_REG <= io.EXMEM_rd @[MEM_WR.scala 25:39]
    io.MEMWB_rd_out <= io_MEMWB_rd_out_REG @[MEM_WR.scala 25:29]
    reg io_MEMWB_dataMem_out_REG : SInt, clock @[MEM_WR.scala 26:39]
    io_MEMWB_dataMem_out_REG <= io.in_dataMem_out @[MEM_WR.scala 26:39]
    io.MEMWB_dataMem_out <= io_MEMWB_dataMem_out_REG @[MEM_WR.scala 26:29]
    reg io_MEMWB_alu_out_REG : SInt, clock @[MEM_WR.scala 27:39]
    io_MEMWB_alu_out_REG <= io.in_alu_out @[MEM_WR.scala 27:39]
    io.MEMWB_alu_out <= io_MEMWB_alu_out_REG @[MEM_WR.scala 27:29]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>}
    
    reg PC : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Pc.scala 9:21]
    io.out <= PC @[Pc.scala 10:12]
    PC <= io.in @[Pc.scala 11:8]
    
  module PC4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[pc4.scala 10:12]
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[pc4.scala 11:21]
    node _io_out_T_1 = tail(_io_out_T, 1) @[pc4.scala 11:21]
    io.out <= _io_out_T_1 @[pc4.scala 11:12]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[InsMem.scala 11:17]
    node _io_data_T = div(io.addr, UInt<3>("h04")) @[InsMem.scala 13:26]
    node _io_data_T_1 = bits(_io_data_T, 9, 0) @[InsMem.scala 13:18]
    infer mport io_data_MPORT = imem[_io_data_T_1], clock @[InsMem.scala 13:18]
    io.data <= io_data_MPORT @[InsMem.scala 13:11]
    
  module Datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip mem_write : UInt<1>, flip addr : UInt<32>, flip dataIn : SInt<32>, dataOut : SInt<32>, flip fun3 : UInt<3>, flip mem_read : UInt<1>}
    
    cmem memory : SInt<8>[4][1024] @[DataMem.scala 14:19]
    wire mask : UInt<1>[4] @[DataMem.scala 15:18]
    wire data : SInt<8>[4] @[DataMem.scala 16:18]
    wire tempread : SInt<8>[4] @[DataMem.scala 17:22]
    io.dataOut <= asSInt(UInt<1>("h00")) @[DataMem.scala 19:14]
    node _data_0_T = bits(io.dataIn, 7, 0) @[DataMem.scala 21:23]
    node _data_0_T_1 = asSInt(_data_0_T) @[DataMem.scala 21:36]
    data[0] <= _data_0_T_1 @[DataMem.scala 21:11]
    node _data_1_T = bits(io.dataIn, 15, 8) @[DataMem.scala 22:23]
    node _data_1_T_1 = asSInt(_data_1_T) @[DataMem.scala 22:37]
    data[1] <= _data_1_T_1 @[DataMem.scala 22:11]
    node _data_2_T = bits(io.dataIn, 23, 16) @[DataMem.scala 23:23]
    node _data_2_T_1 = asSInt(_data_2_T) @[DataMem.scala 23:38]
    data[2] <= _data_2_T_1 @[DataMem.scala 23:11]
    node _data_3_T = bits(io.dataIn, 31, 24) @[DataMem.scala 24:23]
    node _data_3_T_1 = asSInt(_data_3_T) @[DataMem.scala 24:38]
    data[3] <= _data_3_T_1 @[DataMem.scala 24:11]
    tempread[0] <= asSInt(UInt<1>("h00")) @[DataMem.scala 26:15]
    tempread[1] <= asSInt(UInt<1>("h00")) @[DataMem.scala 27:15]
    tempread[2] <= asSInt(UInt<1>("h00")) @[DataMem.scala 28:15]
    tempread[3] <= asSInt(UInt<1>("h00")) @[DataMem.scala 29:15]
    mask[0] <= UInt<1>("h00") @[DataMem.scala 31:11]
    mask[1] <= UInt<1>("h00") @[DataMem.scala 32:11]
    mask[2] <= UInt<1>("h00") @[DataMem.scala 33:11]
    mask[3] <= UInt<1>("h00") @[DataMem.scala 34:11]
    when io.mem_write : @[DataMem.scala 36:22]
      node _T = eq(io.fun3, UInt<1>("h00")) @[DataMem.scala 37:18]
      when _T : @[DataMem.scala 37:27]
        node _T_1 = bits(io.addr, 1, 0) @[DataMem.scala 38:19]
        node _T_2 = eq(_T_1, UInt<1>("h00")) @[DataMem.scala 38:26]
        when _T_2 : @[DataMem.scala 38:35]
          mask[0] <= UInt<1>("h01") @[DataMem.scala 39:17]
          mask[1] <= UInt<1>("h00") @[DataMem.scala 40:17]
          mask[2] <= UInt<1>("h00") @[DataMem.scala 41:17]
          mask[3] <= UInt<1>("h00") @[DataMem.scala 42:17]
          skip @[DataMem.scala 38:35]
        else : @[DataMem.scala 43:41]
          node _T_3 = bits(io.addr, 1, 0) @[DataMem.scala 43:25]
          node _T_4 = eq(_T_3, UInt<1>("h01")) @[DataMem.scala 43:32]
          when _T_4 : @[DataMem.scala 43:41]
            mask[0] <= UInt<1>("h00") @[DataMem.scala 44:17]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 45:17]
            mask[2] <= UInt<1>("h00") @[DataMem.scala 46:17]
            mask[3] <= UInt<1>("h00") @[DataMem.scala 47:17]
            node _data_1_T_2 = bits(io.dataIn, 7, 0) @[DataMem.scala 49:29]
            node _data_1_T_3 = asSInt(_data_1_T_2) @[DataMem.scala 49:42]
            data[1] <= _data_1_T_3 @[DataMem.scala 49:17]
            skip @[DataMem.scala 43:41]
          else : @[DataMem.scala 52:41]
            node _T_5 = bits(io.addr, 1, 0) @[DataMem.scala 52:25]
            node _T_6 = eq(_T_5, UInt<2>("h02")) @[DataMem.scala 52:32]
            when _T_6 : @[DataMem.scala 52:41]
              mask[0] <= UInt<1>("h00") @[DataMem.scala 53:17]
              mask[1] <= UInt<1>("h00") @[DataMem.scala 54:17]
              mask[2] <= UInt<1>("h01") @[DataMem.scala 55:17]
              mask[3] <= UInt<1>("h00") @[DataMem.scala 56:17]
              node _data_2_T_2 = bits(io.dataIn, 7, 0) @[DataMem.scala 58:29]
              node _data_2_T_3 = asSInt(_data_2_T_2) @[DataMem.scala 58:42]
              data[2] <= _data_2_T_3 @[DataMem.scala 58:17]
              skip @[DataMem.scala 52:41]
            else : @[DataMem.scala 61:41]
              node _T_7 = bits(io.addr, 1, 0) @[DataMem.scala 61:25]
              node _T_8 = eq(_T_7, UInt<2>("h03")) @[DataMem.scala 61:32]
              when _T_8 : @[DataMem.scala 61:41]
                mask[0] <= UInt<1>("h00") @[DataMem.scala 62:17]
                mask[1] <= UInt<1>("h00") @[DataMem.scala 63:17]
                mask[2] <= UInt<1>("h00") @[DataMem.scala 64:17]
                mask[3] <= UInt<1>("h01") @[DataMem.scala 65:17]
                node _data_3_T_2 = bits(io.dataIn, 7, 0) @[DataMem.scala 67:29]
                node _data_3_T_3 = asSInt(_data_3_T_2) @[DataMem.scala 67:42]
                data[3] <= _data_3_T_3 @[DataMem.scala 67:17]
                skip @[DataMem.scala 61:41]
        skip @[DataMem.scala 37:27]
      else : @[DataMem.scala 71:34]
        node _T_9 = eq(io.fun3, UInt<1>("h01")) @[DataMem.scala 71:25]
        when _T_9 : @[DataMem.scala 71:34]
          node _T_10 = bits(io.addr, 1, 0) @[DataMem.scala 72:21]
          node _T_11 = eq(_T_10, UInt<1>("h00")) @[DataMem.scala 72:28]
          when _T_11 : @[DataMem.scala 72:37]
            mask[0] <= UInt<1>("h01") @[DataMem.scala 73:19]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 74:19]
            mask[2] <= UInt<1>("h00") @[DataMem.scala 75:19]
            mask[3] <= UInt<1>("h00") @[DataMem.scala 76:19]
            skip @[DataMem.scala 72:37]
          else : @[DataMem.scala 78:43]
            node _T_12 = bits(io.addr, 1, 0) @[DataMem.scala 78:27]
            node _T_13 = eq(_T_12, UInt<1>("h01")) @[DataMem.scala 78:34]
            when _T_13 : @[DataMem.scala 78:43]
              mask[0] <= UInt<1>("h00") @[DataMem.scala 79:19]
              mask[1] <= UInt<1>("h01") @[DataMem.scala 80:19]
              mask[2] <= UInt<1>("h01") @[DataMem.scala 81:19]
              mask[3] <= UInt<1>("h00") @[DataMem.scala 82:19]
              node _data_1_T_4 = bits(io.dataIn, 7, 0) @[DataMem.scala 84:31]
              node _data_1_T_5 = asSInt(_data_1_T_4) @[DataMem.scala 84:44]
              data[1] <= _data_1_T_5 @[DataMem.scala 84:19]
              node _data_2_T_4 = bits(io.dataIn, 15, 8) @[DataMem.scala 85:31]
              node _data_2_T_5 = asSInt(_data_2_T_4) @[DataMem.scala 85:45]
              data[2] <= _data_2_T_5 @[DataMem.scala 85:19]
              skip @[DataMem.scala 78:43]
            else : @[DataMem.scala 88:43]
              node _T_14 = bits(io.addr, 1, 0) @[DataMem.scala 88:27]
              node _T_15 = eq(_T_14, UInt<2>("h02")) @[DataMem.scala 88:34]
              when _T_15 : @[DataMem.scala 88:43]
                mask[0] <= UInt<1>("h00") @[DataMem.scala 89:19]
                mask[1] <= UInt<1>("h00") @[DataMem.scala 90:19]
                mask[2] <= UInt<1>("h01") @[DataMem.scala 91:19]
                mask[3] <= UInt<1>("h01") @[DataMem.scala 92:19]
                node _data_2_T_6 = bits(io.dataIn, 7, 0) @[DataMem.scala 94:31]
                node _data_2_T_7 = asSInt(_data_2_T_6) @[DataMem.scala 94:44]
                data[2] <= _data_2_T_7 @[DataMem.scala 94:19]
                node _data_3_T_4 = bits(io.dataIn, 15, 8) @[DataMem.scala 95:31]
                node _data_3_T_5 = asSInt(_data_3_T_4) @[DataMem.scala 95:45]
                data[3] <= _data_3_T_5 @[DataMem.scala 95:19]
                skip @[DataMem.scala 88:43]
              else : @[DataMem.scala 98:43]
                node _T_16 = bits(io.addr, 1, 0) @[DataMem.scala 98:27]
                node _T_17 = eq(_T_16, UInt<2>("h03")) @[DataMem.scala 98:34]
                when _T_17 : @[DataMem.scala 98:43]
                  mask[0] <= UInt<1>("h00") @[DataMem.scala 99:19]
                  mask[1] <= UInt<1>("h00") @[DataMem.scala 100:19]
                  mask[2] <= UInt<1>("h00") @[DataMem.scala 101:19]
                  mask[3] <= UInt<1>("h01") @[DataMem.scala 102:19]
                  node _data_3_T_6 = bits(io.dataIn, 7, 0) @[DataMem.scala 104:31]
                  node _data_3_T_7 = asSInt(_data_3_T_6) @[DataMem.scala 104:44]
                  data[3] <= _data_3_T_7 @[DataMem.scala 104:19]
                  skip @[DataMem.scala 98:43]
          skip @[DataMem.scala 71:34]
        else : @[DataMem.scala 108:34]
          node _T_18 = eq(io.fun3, UInt<2>("h02")) @[DataMem.scala 108:25]
          when _T_18 : @[DataMem.scala 108:34]
            mask[0] <= UInt<1>("h01") @[DataMem.scala 109:17]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 110:17]
            mask[2] <= UInt<1>("h01") @[DataMem.scala 111:17]
            mask[3] <= UInt<1>("h01") @[DataMem.scala 112:17]
            skip @[DataMem.scala 108:34]
      mask[0] <= UInt<1>("h01") @[DataMem.scala 115:15]
      mask[1] <= UInt<1>("h00") @[DataMem.scala 116:15]
      mask[2] <= UInt<1>("h00") @[DataMem.scala 117:15]
      mask[3] <= UInt<1>("h00") @[DataMem.scala 118:15]
      node _T_19 = bits(io.addr, 31, 2) @[DataMem.scala 119:25]
      node _T_20 = bits(_T_19, 9, 0)
      write mport MPORT = memory[_T_20], clock
      when mask[0] :
        MPORT[0] <= data[0]
        skip
      when mask[1] :
        MPORT[1] <= data[1]
        skip
      when mask[2] :
        MPORT[2] <= data[2]
        skip
      when mask[3] :
        MPORT[3] <= data[3]
        skip
      skip @[DataMem.scala 36:22]
    node _T_21 = bits(io.addr, 31, 2) @[DataMem.scala 124:34]
    node _T_22 = bits(_T_21, 9, 0) @[DataMem.scala 124:26]
    read mport MPORT_1 = memory[_T_22], clock @[DataMem.scala 124:26]
    tempread[0] <= MPORT_1[0] @[DataMem.scala 124:12]
    tempread[1] <= MPORT_1[1] @[DataMem.scala 124:12]
    tempread[2] <= MPORT_1[2] @[DataMem.scala 124:12]
    tempread[3] <= MPORT_1[3] @[DataMem.scala 124:12]
    when io.mem_read : @[DataMem.scala 125:20]
      node _T_23 = bits(io.addr, 31, 2) @[DataMem.scala 126:34]
      node _T_24 = bits(_T_23, 9, 0) @[DataMem.scala 126:26]
      read mport MPORT_2 = memory[_T_24], clock @[DataMem.scala 126:26]
      tempread[0] <= MPORT_2[0] @[DataMem.scala 126:12]
      tempread[1] <= MPORT_2[1] @[DataMem.scala 126:12]
      tempread[2] <= MPORT_2[2] @[DataMem.scala 126:12]
      tempread[3] <= MPORT_2[3] @[DataMem.scala 126:12]
      node _T_25 = eq(io.fun3, UInt<1>("h00")) @[DataMem.scala 127:16]
      when _T_25 : @[DataMem.scala 127:25]
        node _T_26 = bits(io.addr, 1, 0) @[DataMem.scala 128:17]
        node _T_27 = eq(_T_26, UInt<1>("h00")) @[DataMem.scala 128:23]
        when _T_27 : @[DataMem.scala 128:31]
          node _io_dataOut_T = bits(tempread[0], 7, 7) @[DataMem.scala 129:42]
          node _io_dataOut_T_1 = bits(_io_dataOut_T, 0, 0) @[Bitwise.scala 72:15]
          node io_dataOut_hi = mux(_io_dataOut_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node io_dataOut_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
          node _io_dataOut_T_2 = cat(io_dataOut_hi, io_dataOut_lo) @[Cat.scala 30:58]
          node _io_dataOut_T_3 = asSInt(_io_dataOut_T_2) @[DataMem.scala 129:66]
          io.dataOut <= _io_dataOut_T_3 @[DataMem.scala 129:16]
          skip @[DataMem.scala 128:31]
        else : @[DataMem.scala 130:35]
          node _T_28 = bits(io.addr, 1, 0) @[DataMem.scala 130:22]
          node _T_29 = eq(_T_28, UInt<1>("h01")) @[DataMem.scala 130:27]
          when _T_29 : @[DataMem.scala 130:35]
            node _io_dataOut_T_4 = bits(tempread[1], 7, 7) @[DataMem.scala 131:42]
            node _io_dataOut_T_5 = bits(_io_dataOut_T_4, 0, 0) @[Bitwise.scala 72:15]
            node io_dataOut_hi_1 = mux(_io_dataOut_T_5, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node io_dataOut_lo_1 = asUInt(tempread[1]) @[Cat.scala 30:58]
            node _io_dataOut_T_6 = cat(io_dataOut_hi_1, io_dataOut_lo_1) @[Cat.scala 30:58]
            node _io_dataOut_T_7 = asSInt(_io_dataOut_T_6) @[DataMem.scala 131:66]
            io.dataOut <= _io_dataOut_T_7 @[DataMem.scala 131:16]
            skip @[DataMem.scala 130:35]
          else : @[DataMem.scala 132:35]
            node _T_30 = bits(io.addr, 1, 0) @[DataMem.scala 132:22]
            node _T_31 = eq(_T_30, UInt<2>("h02")) @[DataMem.scala 132:27]
            when _T_31 : @[DataMem.scala 132:35]
              node _io_dataOut_T_8 = bits(tempread[2], 7, 7) @[DataMem.scala 133:42]
              node _io_dataOut_T_9 = bits(_io_dataOut_T_8, 0, 0) @[Bitwise.scala 72:15]
              node io_dataOut_hi_2 = mux(_io_dataOut_T_9, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node io_dataOut_lo_2 = asUInt(tempread[2]) @[Cat.scala 30:58]
              node _io_dataOut_T_10 = cat(io_dataOut_hi_2, io_dataOut_lo_2) @[Cat.scala 30:58]
              node _io_dataOut_T_11 = asSInt(_io_dataOut_T_10) @[DataMem.scala 133:66]
              io.dataOut <= _io_dataOut_T_11 @[DataMem.scala 133:16]
              skip @[DataMem.scala 132:35]
            else : @[DataMem.scala 134:35]
              node _T_32 = bits(io.addr, 1, 0) @[DataMem.scala 134:22]
              node _T_33 = eq(_T_32, UInt<2>("h03")) @[DataMem.scala 134:27]
              when _T_33 : @[DataMem.scala 134:35]
                node _io_dataOut_T_12 = bits(tempread[3], 7, 7) @[DataMem.scala 135:42]
                node _io_dataOut_T_13 = bits(_io_dataOut_T_12, 0, 0) @[Bitwise.scala 72:15]
                node io_dataOut_hi_3 = mux(_io_dataOut_T_13, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node io_dataOut_lo_3 = asUInt(tempread[3]) @[Cat.scala 30:58]
                node _io_dataOut_T_14 = cat(io_dataOut_hi_3, io_dataOut_lo_3) @[Cat.scala 30:58]
                node _io_dataOut_T_15 = asSInt(_io_dataOut_T_14) @[DataMem.scala 135:66]
                io.dataOut <= _io_dataOut_T_15 @[DataMem.scala 135:16]
                skip @[DataMem.scala 134:35]
        skip @[DataMem.scala 127:25]
      else : @[DataMem.scala 137:31]
        node _T_34 = eq(io.fun3, UInt<1>("h01")) @[DataMem.scala 137:22]
        when _T_34 : @[DataMem.scala 137:31]
          node _T_35 = bits(io.addr, 1, 0) @[DataMem.scala 138:17]
          node _T_36 = eq(_T_35, UInt<1>("h00")) @[DataMem.scala 138:23]
          when _T_36 : @[DataMem.scala 138:31]
            node _io_dataOut_T_16 = bits(tempread[0], 7, 7) @[DataMem.scala 139:42]
            node _io_dataOut_T_17 = bits(_io_dataOut_T_16, 0, 0) @[Bitwise.scala 72:15]
            node io_dataOut_hi_hi = mux(_io_dataOut_T_17, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node io_dataOut_lo_4 = asUInt(tempread[1]) @[Cat.scala 30:58]
            node io_dataOut_hi_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
            node io_dataOut_hi_4 = cat(io_dataOut_hi_hi, io_dataOut_hi_lo) @[Cat.scala 30:58]
            node _io_dataOut_T_18 = cat(io_dataOut_hi_4, io_dataOut_lo_4) @[Cat.scala 30:58]
            node _io_dataOut_T_19 = asSInt(_io_dataOut_T_18) @[DataMem.scala 139:78]
            io.dataOut <= _io_dataOut_T_19 @[DataMem.scala 139:16]
            skip @[DataMem.scala 138:31]
          else : @[DataMem.scala 140:35]
            node _T_37 = bits(io.addr, 1, 0) @[DataMem.scala 140:22]
            node _T_38 = eq(_T_37, UInt<1>("h01")) @[DataMem.scala 140:27]
            when _T_38 : @[DataMem.scala 140:35]
              node _io_dataOut_T_20 = bits(tempread[1], 7, 7) @[DataMem.scala 141:42]
              node _io_dataOut_T_21 = bits(_io_dataOut_T_20, 0, 0) @[Bitwise.scala 72:15]
              node io_dataOut_hi_hi_1 = mux(_io_dataOut_T_21, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node io_dataOut_lo_5 = asUInt(tempread[2]) @[Cat.scala 30:58]
              node io_dataOut_hi_lo_1 = asUInt(tempread[1]) @[Cat.scala 30:58]
              node io_dataOut_hi_5 = cat(io_dataOut_hi_hi_1, io_dataOut_hi_lo_1) @[Cat.scala 30:58]
              node _io_dataOut_T_22 = cat(io_dataOut_hi_5, io_dataOut_lo_5) @[Cat.scala 30:58]
              node _io_dataOut_T_23 = asSInt(_io_dataOut_T_22) @[DataMem.scala 141:78]
              io.dataOut <= _io_dataOut_T_23 @[DataMem.scala 141:16]
              skip @[DataMem.scala 140:35]
            else : @[DataMem.scala 142:35]
              node _T_39 = bits(io.addr, 1, 0) @[DataMem.scala 142:22]
              node _T_40 = eq(_T_39, UInt<2>("h02")) @[DataMem.scala 142:27]
              when _T_40 : @[DataMem.scala 142:35]
                node _io_dataOut_T_24 = bits(tempread[2], 7, 7) @[DataMem.scala 143:42]
                node _io_dataOut_T_25 = bits(_io_dataOut_T_24, 0, 0) @[Bitwise.scala 72:15]
                node io_dataOut_hi_hi_2 = mux(_io_dataOut_T_25, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node io_dataOut_lo_6 = asUInt(tempread[3]) @[Cat.scala 30:58]
                node io_dataOut_hi_lo_2 = asUInt(tempread[2]) @[Cat.scala 30:58]
                node io_dataOut_hi_6 = cat(io_dataOut_hi_hi_2, io_dataOut_hi_lo_2) @[Cat.scala 30:58]
                node _io_dataOut_T_26 = cat(io_dataOut_hi_6, io_dataOut_lo_6) @[Cat.scala 30:58]
                node _io_dataOut_T_27 = asSInt(_io_dataOut_T_26) @[DataMem.scala 143:78]
                io.dataOut <= _io_dataOut_T_27 @[DataMem.scala 143:16]
                skip @[DataMem.scala 142:35]
              else : @[DataMem.scala 144:35]
                node _T_41 = bits(io.addr, 1, 0) @[DataMem.scala 144:22]
                node _T_42 = eq(_T_41, UInt<2>("h03")) @[DataMem.scala 144:27]
                when _T_42 : @[DataMem.scala 144:35]
                  node _io_dataOut_T_28 = bits(tempread[3], 7, 7) @[DataMem.scala 145:42]
                  node _io_dataOut_T_29 = bits(_io_dataOut_T_28, 0, 0) @[Bitwise.scala 72:15]
                  node io_dataOut_hi_7 = mux(_io_dataOut_T_29, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node io_dataOut_lo_7 = asUInt(tempread[3]) @[Cat.scala 30:58]
                  node _io_dataOut_T_30 = cat(io_dataOut_hi_7, io_dataOut_lo_7) @[Cat.scala 30:58]
                  node _io_dataOut_T_31 = asSInt(_io_dataOut_T_30) @[DataMem.scala 145:66]
                  io.dataOut <= _io_dataOut_T_31 @[DataMem.scala 145:16]
                  skip @[DataMem.scala 144:35]
          skip @[DataMem.scala 137:31]
        else : @[DataMem.scala 147:31]
          node _T_43 = eq(io.fun3, UInt<2>("h02")) @[DataMem.scala 147:22]
          when _T_43 : @[DataMem.scala 147:31]
            node io_dataOut_lo_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
            node io_dataOut_lo_hi = asUInt(tempread[1]) @[Cat.scala 30:58]
            node io_dataOut_lo_8 = cat(io_dataOut_lo_hi, io_dataOut_lo_lo) @[Cat.scala 30:58]
            node io_dataOut_hi_lo_3 = asUInt(tempread[2]) @[Cat.scala 30:58]
            node io_dataOut_hi_hi_3 = asUInt(tempread[3]) @[Cat.scala 30:58]
            node io_dataOut_hi_8 = cat(io_dataOut_hi_hi_3, io_dataOut_hi_lo_3) @[Cat.scala 30:58]
            node _io_dataOut_T_32 = cat(io_dataOut_hi_8, io_dataOut_lo_8) @[Cat.scala 30:58]
            node _io_dataOut_T_33 = asSInt(_io_dataOut_T_32) @[DataMem.scala 148:81]
            io.dataOut <= _io_dataOut_T_33 @[DataMem.scala 148:16]
            skip @[DataMem.scala 147:31]
      skip @[DataMem.scala 125:20]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, mem_write : UInt<1>, branch : UInt<1>, mem_read : UInt<1>, reg_write : UInt<1>, men_to_reg : UInt<1>, alu_operation : UInt<3>, operand_A : UInt<2>, operand_B : UInt<1>, extend : UInt<2>, next_pc_sel : UInt<2>}
    
    io.mem_write <= UInt<1>("h00") @[control.scala 20:16]
    io.branch <= UInt<1>("h00") @[control.scala 21:13]
    io.mem_read <= UInt<1>("h00") @[control.scala 22:15]
    io.reg_write <= UInt<1>("h00") @[control.scala 23:16]
    io.men_to_reg <= UInt<1>("h00") @[control.scala 24:17]
    io.alu_operation <= UInt<1>("h00") @[control.scala 25:20]
    io.operand_A <= UInt<1>("h00") @[control.scala 26:16]
    io.operand_B <= UInt<1>("h00") @[control.scala 27:16]
    io.extend <= UInt<1>("h00") @[control.scala 28:13]
    io.next_pc_sel <= UInt<1>("h00") @[control.scala 29:18]
    node _T = eq(UInt<6>("h033"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.mem_write <= UInt<1>("h00") @[control.scala 34:20]
      io.branch <= UInt<1>("h00") @[control.scala 35:17]
      io.mem_read <= UInt<1>("h00") @[control.scala 36:19]
      io.reg_write <= UInt<1>("h01") @[control.scala 37:20]
      io.men_to_reg <= UInt<1>("h00") @[control.scala 38:21]
      io.alu_operation <= UInt<1>("h00") @[control.scala 39:24]
      io.operand_A <= UInt<1>("h00") @[control.scala 40:20]
      io.operand_B <= UInt<1>("h00") @[control.scala 41:20]
      io.extend <= UInt<1>("h00") @[control.scala 42:17]
      io.next_pc_sel <= UInt<1>("h00") @[control.scala 43:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.mem_write <= UInt<1>("h00") @[control.scala 48:20]
        io.branch <= UInt<1>("h00") @[control.scala 49:17]
        io.mem_read <= UInt<1>("h00") @[control.scala 50:19]
        io.reg_write <= UInt<1>("h01") @[control.scala 51:20]
        io.men_to_reg <= UInt<1>("h00") @[control.scala 52:21]
        io.alu_operation <= UInt<1>("h01") @[control.scala 53:24]
        io.operand_A <= UInt<1>("h00") @[control.scala 54:20]
        io.operand_B <= UInt<1>("h01") @[control.scala 55:20]
        io.extend <= UInt<1>("h00") @[control.scala 56:17]
        io.next_pc_sel <= UInt<1>("h00") @[control.scala 57:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.mem_write <= UInt<1>("h01") @[control.scala 62:20]
          io.branch <= UInt<1>("h00") @[control.scala 63:17]
          io.mem_read <= UInt<1>("h00") @[control.scala 64:19]
          io.reg_write <= UInt<1>("h00") @[control.scala 65:20]
          io.men_to_reg <= UInt<1>("h00") @[control.scala 66:21]
          io.alu_operation <= UInt<3>("h05") @[control.scala 67:24]
          io.operand_A <= UInt<1>("h00") @[control.scala 68:20]
          io.operand_B <= UInt<1>("h01") @[control.scala 69:20]
          io.extend <= UInt<1>("h01") @[control.scala 70:17]
          io.next_pc_sel <= UInt<1>("h00") @[control.scala 71:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.mem_write <= UInt<1>("h00") @[control.scala 76:20]
            io.branch <= UInt<1>("h00") @[control.scala 77:17]
            io.mem_read <= UInt<1>("h01") @[control.scala 78:19]
            io.reg_write <= UInt<1>("h01") @[control.scala 79:20]
            io.men_to_reg <= UInt<1>("h01") @[control.scala 80:21]
            io.alu_operation <= UInt<3>("h04") @[control.scala 81:24]
            io.operand_A <= UInt<1>("h00") @[control.scala 82:20]
            io.operand_B <= UInt<1>("h01") @[control.scala 83:20]
            io.extend <= UInt<1>("h00") @[control.scala 84:17]
            io.next_pc_sel <= UInt<1>("h00") @[control.scala 85:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.mem_write <= UInt<1>("h00") @[control.scala 90:20]
              io.branch <= UInt<1>("h01") @[control.scala 91:17]
              io.mem_read <= UInt<1>("h00") @[control.scala 92:19]
              io.reg_write <= UInt<1>("h00") @[control.scala 93:20]
              io.men_to_reg <= UInt<1>("h00") @[control.scala 94:21]
              io.alu_operation <= UInt<2>("h02") @[control.scala 95:24]
              io.operand_A <= UInt<1>("h00") @[control.scala 96:20]
              io.operand_B <= UInt<1>("h00") @[control.scala 97:20]
              io.extend <= UInt<1>("h00") @[control.scala 98:17]
              io.next_pc_sel <= UInt<1>("h01") @[control.scala 99:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.mem_write <= UInt<1>("h00") @[control.scala 104:20]
                io.branch <= UInt<1>("h00") @[control.scala 105:17]
                io.mem_read <= UInt<1>("h00") @[control.scala 106:19]
                io.reg_write <= UInt<1>("h01") @[control.scala 107:20]
                io.men_to_reg <= UInt<1>("h00") @[control.scala 108:21]
                io.alu_operation <= UInt<2>("h03") @[control.scala 109:24]
                io.operand_A <= UInt<1>("h01") @[control.scala 110:20]
                io.operand_B <= UInt<1>("h00") @[control.scala 111:20]
                io.extend <= UInt<1>("h00") @[control.scala 112:17]
                io.next_pc_sel <= UInt<2>("h02") @[control.scala 113:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.mem_write <= UInt<1>("h00") @[control.scala 118:20]
                  io.branch <= UInt<1>("h00") @[control.scala 119:17]
                  io.mem_read <= UInt<1>("h00") @[control.scala 120:19]
                  io.reg_write <= UInt<1>("h01") @[control.scala 121:20]
                  io.men_to_reg <= UInt<1>("h00") @[control.scala 122:21]
                  io.alu_operation <= UInt<2>("h03") @[control.scala 123:24]
                  io.operand_A <= UInt<1>("h01") @[control.scala 124:20]
                  io.operand_B <= UInt<1>("h00") @[control.scala 125:20]
                  io.extend <= UInt<1>("h00") @[control.scala 126:17]
                  io.next_pc_sel <= UInt<2>("h03") @[control.scala 127:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.mem_write <= UInt<1>("h00") @[control.scala 132:20]
                    io.branch <= UInt<1>("h00") @[control.scala 133:17]
                    io.mem_read <= UInt<1>("h00") @[control.scala 134:19]
                    io.reg_write <= UInt<1>("h01") @[control.scala 135:20]
                    io.men_to_reg <= UInt<1>("h00") @[control.scala 136:21]
                    io.alu_operation <= UInt<3>("h06") @[control.scala 137:24]
                    io.operand_A <= UInt<2>("h03") @[control.scala 138:20]
                    io.operand_B <= UInt<1>("h01") @[control.scala 139:20]
                    io.extend <= UInt<2>("h02") @[control.scala 140:17]
                    io.next_pc_sel <= UInt<1>("h00") @[control.scala 141:22]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<5>("h017"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.mem_write <= UInt<1>("h00") @[control.scala 146:20]
                      io.branch <= UInt<1>("h00") @[control.scala 147:17]
                      io.mem_read <= UInt<1>("h00") @[control.scala 148:19]
                      io.reg_write <= UInt<1>("h01") @[control.scala 149:20]
                      io.men_to_reg <= UInt<1>("h00") @[control.scala 150:21]
                      io.alu_operation <= UInt<3>("h07") @[control.scala 151:24]
                      io.operand_A <= UInt<2>("h02") @[control.scala 152:20]
                      io.operand_B <= UInt<1>("h01") @[control.scala 153:20]
                      io.extend <= UInt<2>("h02") @[control.scala 154:17]
                      io.next_pc_sel <= UInt<1>("h00") @[control.scala 155:22]
                      skip @[Conditional.scala 39:67]
    
  module ImmGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, I_type : SInt<32>, S_type : SInt<32>, SB_type : SInt<32>, U_type : SInt<32>, UJ_type : SInt<32>}
    
    node _io_I_type_T = bits(io.instr, 31, 31) @[IMM.scala 17:37]
    node _io_I_type_T_1 = bits(_io_I_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_I_type_hi = mux(_io_I_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_I_type_lo = bits(io.instr, 31, 20) @[IMM.scala 17:52]
    node _io_I_type_T_2 = cat(io_I_type_hi, io_I_type_lo) @[Cat.scala 30:58]
    node _io_I_type_T_3 = asSInt(_io_I_type_T_2) @[IMM.scala 17:62]
    io.I_type <= _io_I_type_T_3 @[IMM.scala 17:13]
    node _io_S_type_T = bits(io.instr, 31, 31) @[IMM.scala 20:37]
    node _io_S_type_T_1 = bits(_io_S_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_S_type_hi_hi = mux(_io_S_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_S_type_hi_lo = bits(io.instr, 31, 25) @[IMM.scala 20:52]
    node io_S_type_lo = bits(io.instr, 11, 7) @[IMM.scala 20:70]
    node io_S_type_hi = cat(io_S_type_hi_hi, io_S_type_hi_lo) @[Cat.scala 30:58]
    node _io_S_type_T_2 = cat(io_S_type_hi, io_S_type_lo) @[Cat.scala 30:58]
    node _io_S_type_T_3 = asSInt(_io_S_type_T_2) @[IMM.scala 20:79]
    io.S_type <= _io_S_type_T_3 @[IMM.scala 20:13]
    node _sbImm_T = bits(io.instr, 31, 31) @[IMM.scala 23:36]
    node _sbImm_T_1 = bits(_sbImm_T, 0, 0) @[Bitwise.scala 72:15]
    node sbImm_hi_hi_hi = mux(_sbImm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sbImm_hi_hi_lo = bits(io.instr, 31, 31) @[IMM.scala 23:51]
    node sbImm_hi_lo = bits(io.instr, 7, 7) @[IMM.scala 23:65]
    node sbImm_lo_hi_hi = bits(io.instr, 30, 25) @[IMM.scala 23:78]
    node sbImm_lo_hi_lo = bits(io.instr, 11, 8) @[IMM.scala 23:96]
    node sbImm_lo_hi = cat(sbImm_lo_hi_hi, sbImm_lo_hi_lo) @[Cat.scala 30:58]
    node sbImm_lo = cat(sbImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sbImm_hi_hi = cat(sbImm_hi_hi_hi, sbImm_hi_hi_lo) @[Cat.scala 30:58]
    node sbImm_hi = cat(sbImm_hi_hi, sbImm_hi_lo) @[Cat.scala 30:58]
    node _sbImm_T_2 = cat(sbImm_hi, sbImm_lo) @[Cat.scala 30:58]
    node sbImm = asSInt(_sbImm_T_2) @[IMM.scala 23:115]
    node _io_SB_type_T = asSInt(io.pc) @[IMM.scala 24:31]
    node _io_SB_type_T_1 = add(sbImm, _io_SB_type_T) @[IMM.scala 24:23]
    node _io_SB_type_T_2 = tail(_io_SB_type_T_1, 1) @[IMM.scala 24:23]
    node _io_SB_type_T_3 = asSInt(_io_SB_type_T_2) @[IMM.scala 24:23]
    io.SB_type <= _io_SB_type_T_3 @[IMM.scala 24:14]
    node io_U_type_hi = bits(io.instr, 31, 12) @[IMM.scala 27:28]
    node io_U_type_lo = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_U_type_T = cat(io_U_type_hi, io_U_type_lo) @[Cat.scala 30:58]
    node _io_U_type_T_1 = asSInt(_io_U_type_T) @[IMM.scala 27:53]
    io.U_type <= _io_U_type_T_1 @[IMM.scala 27:13]
    node _ujImm_T = bits(io.instr, 31, 31) @[IMM.scala 30:36]
    node _ujImm_T_1 = bits(_ujImm_T, 0, 0) @[Bitwise.scala 72:15]
    node ujImm_hi_hi_hi = mux(_ujImm_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node ujImm_hi_hi_lo = bits(io.instr, 31, 31) @[IMM.scala 30:51]
    node ujImm_hi_lo = bits(io.instr, 19, 12) @[IMM.scala 30:65]
    node ujImm_lo_hi_hi = bits(io.instr, 20, 20) @[IMM.scala 30:83]
    node ujImm_lo_hi_lo = bits(io.instr, 30, 21) @[IMM.scala 30:97]
    node ujImm_lo_hi = cat(ujImm_lo_hi_hi, ujImm_lo_hi_lo) @[Cat.scala 30:58]
    node ujImm_lo = cat(ujImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node ujImm_hi_hi = cat(ujImm_hi_hi_hi, ujImm_hi_hi_lo) @[Cat.scala 30:58]
    node ujImm_hi = cat(ujImm_hi_hi, ujImm_hi_lo) @[Cat.scala 30:58]
    node _ujImm_T_2 = cat(ujImm_hi, ujImm_lo) @[Cat.scala 30:58]
    node ujImm = asSInt(_ujImm_T_2) @[IMM.scala 30:117]
    node _io_UJ_type_T = asSInt(io.pc) @[IMM.scala 31:31]
    node _io_UJ_type_T_1 = add(ujImm, _io_UJ_type_T) @[IMM.scala 31:23]
    node _io_UJ_type_T_2 = tail(_io_UJ_type_T_1, 1) @[IMM.scala 31:23]
    node _io_UJ_type_T_3 = asSInt(_io_UJ_type_T_2) @[IMM.scala 31:23]
    io.UJ_type <= _io_UJ_type_T_3 @[IMM.scala 31:14]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip reg_write : UInt<1>, flip w_reg : UInt<5>, flip w_data : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _regfile_WIRE : SInt<32>[32] @[RegFile.scala 15:32]
    _regfile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    _regfile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegFile.scala 15:32]
    reg regfile : SInt<32>[32], clock with : (reset => (reset, _regfile_WIRE)) @[RegFile.scala 15:24]
    node _io_rdata1_T = eq(io.rs1, UInt<1>("h00")) @[RegFile.scala 17:27]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, asSInt(UInt<1>("h00")), regfile[io.rs1]) @[RegFile.scala 17:19]
    io.rdata1 <= _io_rdata1_T_1 @[RegFile.scala 17:13]
    node _io_rdata2_T = eq(io.rs2, UInt<1>("h00")) @[RegFile.scala 18:27]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, asSInt(UInt<1>("h00")), regfile[io.rs2]) @[RegFile.scala 18:19]
    io.rdata2 <= _io_rdata2_T_1 @[RegFile.scala 18:13]
    node _T = neq(io.w_reg, UInt<1>("h00")) @[RegFile.scala 20:33]
    node _T_1 = and(io.reg_write, _T) @[RegFile.scala 20:21]
    when _T_1 : @[RegFile.scala 20:42]
      regfile[io.w_reg] <= io.w_data @[RegFile.scala 21:23]
      skip @[RegFile.scala 20:42]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<1>, flip aluOp : UInt<3>, out : UInt<5>}
    
    io.out <= UInt<1>("h00") @[Alu_Control.scala 12:10]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[Alu_Control.scala 15:17]
    when _T : @[Alu_Control.scala 15:26]
      node io_out_hi = cat(UInt<2>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
      io.out <= _io_out_T @[Alu_Control.scala 16:12]
      skip @[Alu_Control.scala 15:26]
    else : @[Alu_Control.scala 18:32]
      node _T_1 = eq(io.aluOp, UInt<1>("h01")) @[Alu_Control.scala 18:23]
      when _T_1 : @[Alu_Control.scala 18:32]
        node _io_out_T_1 = cat(UInt<2>("h00"), io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T_1 @[Alu_Control.scala 19:12]
        skip @[Alu_Control.scala 18:32]
      else : @[Alu_Control.scala 22:32]
        node _T_2 = eq(io.aluOp, UInt<2>("h02")) @[Alu_Control.scala 22:23]
        when _T_2 : @[Alu_Control.scala 22:32]
          node _io_out_T_2 = cat(UInt<3>("h02"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_2 @[Alu_Control.scala 23:12]
          skip @[Alu_Control.scala 22:32]
        else : @[Alu_Control.scala 26:32]
          node _T_3 = eq(io.aluOp, UInt<2>("h03")) @[Alu_Control.scala 26:23]
          when _T_3 : @[Alu_Control.scala 26:32]
            io.out <= UInt<5>("h01f") @[Alu_Control.scala 27:12]
            skip @[Alu_Control.scala 26:32]
          else : @[Alu_Control.scala 30:92]
            node _T_4 = eq(io.aluOp, UInt<3>("h04")) @[Alu_Control.scala 30:23]
            node _T_5 = eq(io.aluOp, UInt<3>("h05")) @[Alu_Control.scala 30:43]
            node _T_6 = or(_T_4, _T_5) @[Alu_Control.scala 30:31]
            node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[Alu_Control.scala 30:63]
            node _T_8 = or(_T_6, _T_7) @[Alu_Control.scala 30:51]
            node _T_9 = eq(io.aluOp, UInt<3>("h07")) @[Alu_Control.scala 30:83]
            node _T_10 = or(_T_8, _T_9) @[Alu_Control.scala 30:71]
            when _T_10 : @[Alu_Control.scala 30:92]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 31:12]
              skip @[Alu_Control.scala 30:92]
            else : @[Alu_Control.scala 33:16]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 34:12]
              skip @[Alu_Control.scala 33:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<5>, out : SInt<32>}
    
    wire result : SInt<32>
    result <= asSInt(UInt<32>("h00"))
    node _T = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_1 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_2 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_3 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_4 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_5 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_6 = or(_T, _T_1) @[Conditional.scala 37:55]
    node _T_7 = or(_T_6, _T_2) @[Conditional.scala 37:55]
    node _T_8 = or(_T_7, _T_3) @[Conditional.scala 37:55]
    node _T_9 = or(_T_8, _T_4) @[Conditional.scala 37:55]
    node _T_10 = or(_T_9, _T_5) @[Conditional.scala 37:55]
    when _T_10 : @[Conditional.scala 40:58]
      node _result_T = add(io.in_A, io.in_B) @[ALU.scala 47:25]
      node _result_T_1 = tail(_result_T, 1) @[ALU.scala 47:25]
      node _result_T_2 = asSInt(_result_T_1) @[ALU.scala 47:25]
      result <= _result_T_2 @[ALU.scala 47:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_11 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_12 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_13 = or(_T_11, _T_12) @[Conditional.scala 37:55]
      when _T_13 : @[Conditional.scala 39:67]
        node _result_T_3 = asUInt(io.in_A) @[ALU.scala 50:26]
        node _result_T_4 = bits(io.in_B, 4, 0) @[ALU.scala 50:43]
        node _result_T_5 = dshl(_result_T_3, _result_T_4) @[ALU.scala 50:33]
        node _result_T_6 = asSInt(_result_T_5) @[ALU.scala 50:51]
        result <= _result_T_6 @[ALU.scala 50:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_15 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_16 = or(_T_14, _T_15) @[Conditional.scala 37:55]
        when _T_16 : @[Conditional.scala 39:67]
          node _result_T_7 = lt(io.in_A, io.in_B) @[ALU.scala 53:29]
          node _result_T_8 = mux(_result_T_7, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 53:20]
          result <= _result_T_8 @[ALU.scala 53:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_17 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_18 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_19 = or(_T_17, _T_18) @[Conditional.scala 37:55]
          when _T_19 : @[Conditional.scala 39:67]
            node _result_T_9 = asUInt(io.in_A) @[ALU.scala 56:29]
            node _result_T_10 = asUInt(io.in_B) @[ALU.scala 56:46]
            node _result_T_11 = lt(_result_T_9, _result_T_10) @[ALU.scala 56:36]
            node _result_T_12 = mux(_result_T_11, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 56:20]
            result <= _result_T_12 @[ALU.scala 56:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_21 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_22 = or(_T_20, _T_21) @[Conditional.scala 37:55]
            when _T_22 : @[Conditional.scala 39:67]
              node _result_T_13 = xor(io.in_A, io.in_B) @[ALU.scala 59:25]
              node _result_T_14 = asSInt(_result_T_13) @[ALU.scala 59:25]
              result <= _result_T_14 @[ALU.scala 59:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_23 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_24 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_25 = or(_T_23, _T_24) @[Conditional.scala 37:55]
              when _T_25 : @[Conditional.scala 39:67]
                node _result_T_15 = asUInt(io.in_A) @[ALU.scala 62:26]
                node _result_T_16 = bits(io.in_B, 4, 0) @[ALU.scala 62:43]
                node _result_T_17 = dshr(_result_T_15, _result_T_16) @[ALU.scala 62:33]
                node _result_T_18 = asSInt(_result_T_17) @[ALU.scala 62:51]
                result <= _result_T_18 @[ALU.scala 62:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_26 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_27 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_28 = or(_T_26, _T_27) @[Conditional.scala 37:55]
                when _T_28 : @[Conditional.scala 39:67]
                  node _result_T_19 = or(io.in_A, io.in_B) @[ALU.scala 65:25]
                  node _result_T_20 = asSInt(_result_T_19) @[ALU.scala 65:25]
                  result <= _result_T_20 @[ALU.scala 65:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_29 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_30 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_31 = or(_T_29, _T_30) @[Conditional.scala 37:55]
                  when _T_31 : @[Conditional.scala 39:67]
                    node _result_T_21 = and(io.in_A, io.in_B) @[ALU.scala 68:25]
                    node _result_T_22 = asSInt(_result_T_21) @[ALU.scala 68:25]
                    result <= _result_T_22 @[ALU.scala 68:14]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_32 = eq(UInt<5>("h08"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_32 : @[Conditional.scala 39:67]
                      node _result_T_23 = sub(io.in_A, io.in_B) @[ALU.scala 71:25]
                      node _result_T_24 = tail(_result_T_23, 1) @[ALU.scala 71:25]
                      node _result_T_25 = asSInt(_result_T_24) @[ALU.scala 71:25]
                      result <= _result_T_25 @[ALU.scala 71:14]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_33 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_34 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_35 = or(_T_33, _T_34) @[Conditional.scala 37:55]
                      when _T_35 : @[Conditional.scala 39:67]
                        node _result_T_26 = bits(io.in_B, 4, 0) @[ALU.scala 74:36]
                        node _result_T_27 = dshr(io.in_A, _result_T_26) @[ALU.scala 74:26]
                        result <= _result_T_27 @[ALU.scala 74:14]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_36 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_37 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_38 = or(_T_36, _T_37) @[Conditional.scala 37:55]
                        when _T_38 : @[Conditional.scala 39:67]
                          result <= io.in_A @[ALU.scala 77:14]
                          skip @[Conditional.scala 39:67]
    io.out <= result @[ALU.scala 81:10]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[Branch.scala 14:15]
    when io.branch : @[Branch.scala 16:19]
      node _T = eq(io.fnct3, UInt<1>("h00")) @[Branch.scala 18:19]
      when _T : @[Branch.scala 18:28]
        node _io_br_taken_T = eq(io.arg_x, io.arg_y) @[Branch.scala 19:31]
        io.br_taken <= _io_br_taken_T @[Branch.scala 19:19]
        skip @[Branch.scala 18:28]
      else : @[Branch.scala 22:33]
        node _T_1 = eq(io.fnct3, UInt<1>("h01")) @[Branch.scala 22:24]
        when _T_1 : @[Branch.scala 22:33]
          node _io_br_taken_T_1 = neq(io.arg_x, io.arg_y) @[Branch.scala 23:31]
          io.br_taken <= _io_br_taken_T_1 @[Branch.scala 23:19]
          skip @[Branch.scala 22:33]
        else : @[Branch.scala 26:33]
          node _T_2 = eq(io.fnct3, UInt<3>("h04")) @[Branch.scala 26:24]
          when _T_2 : @[Branch.scala 26:33]
            node _io_br_taken_T_2 = lt(io.arg_x, io.arg_y) @[Branch.scala 27:31]
            io.br_taken <= _io_br_taken_T_2 @[Branch.scala 27:19]
            skip @[Branch.scala 26:33]
          else : @[Branch.scala 30:33]
            node _T_3 = eq(io.fnct3, UInt<3>("h05")) @[Branch.scala 30:24]
            when _T_3 : @[Branch.scala 30:33]
              node _io_br_taken_T_3 = geq(io.arg_x, io.arg_y) @[Branch.scala 31:31]
              io.br_taken <= _io_br_taken_T_3 @[Branch.scala 31:19]
              skip @[Branch.scala 30:33]
            else : @[Branch.scala 34:33]
              node _T_4 = eq(io.fnct3, UInt<3>("h06")) @[Branch.scala 34:24]
              when _T_4 : @[Branch.scala 34:33]
                node _io_br_taken_T_4 = asUInt(io.arg_x) @[Branch.scala 35:31]
                node _io_br_taken_T_5 = asUInt(io.arg_y) @[Branch.scala 35:49]
                node _io_br_taken_T_6 = lt(_io_br_taken_T_4, _io_br_taken_T_5) @[Branch.scala 35:38]
                io.br_taken <= _io_br_taken_T_6 @[Branch.scala 35:19]
                skip @[Branch.scala 34:33]
              else : @[Branch.scala 38:33]
                node _T_5 = eq(io.fnct3, UInt<3>("h07")) @[Branch.scala 38:24]
                when _T_5 : @[Branch.scala 38:33]
                  node _io_br_taken_T_7 = asUInt(io.arg_x) @[Branch.scala 39:31]
                  node _io_br_taken_T_8 = asUInt(io.arg_y) @[Branch.scala 39:50]
                  node _io_br_taken_T_9 = geq(_io_br_taken_T_7, _io_br_taken_T_8) @[Branch.scala 39:38]
                  io.br_taken <= _io_br_taken_T_9 @[Branch.scala 39:19]
                  skip @[Branch.scala 38:33]
      skip @[Branch.scala 16:19]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip imme : UInt<32>, flip rdata1 : UInt<32>, out : UInt<32>}
    
    node _computedAddr_T = add(io.imme, io.rdata1) @[Jalr.scala 11:30]
    node computedAddr = tail(_computedAddr_T, 1) @[Jalr.scala 11:30]
    node _io_out_T = and(computedAddr, UInt<32>("h0fffffffe")) @[Jalr.scala 14:26]
    io.out <= _io_out_T @[Jalr.scala 14:10]
    
  module Forwarding : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_rs1 : UInt<5>, flip IDEX_rs2 : UInt<5>, flip EXMEM_rd : UInt<5>, flip EXMEM_regWr : UInt<1>, flip MEMWB_rd : UInt<5>, flip MEMWB_regWr : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[Forwarding.scala 19:18]
    io.forward_b <= UInt<1>("h00") @[Forwarding.scala 20:18]
    node _T = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 22:25]
    node _T_1 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 22:51]
    node _T_2 = and(_T, _T_1) @[Forwarding.scala 22:36]
    node _T_3 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 23:26]
    node _T_4 = and(_T_2, _T_3) @[Forwarding.scala 22:66]
    node _T_5 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 23:66]
    node _T_6 = and(_T_4, _T_5) @[Forwarding.scala 23:50]
    when _T_6 : @[Forwarding.scala 23:84]
      io.forward_a <= UInt<2>("h02") @[Forwarding.scala 24:22]
      io.forward_b <= UInt<2>("h02") @[Forwarding.scala 25:22]
      skip @[Forwarding.scala 23:84]
    else : @[Forwarding.scala 28:44]
      node _T_7 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 27:31]
      node _T_8 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 27:57]
      node _T_9 = and(_T_7, _T_8) @[Forwarding.scala 27:42]
      node _T_10 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 28:26]
      node _T_11 = and(_T_9, _T_10) @[Forwarding.scala 27:72]
      when _T_11 : @[Forwarding.scala 28:44]
        io.forward_b <= UInt<2>("h02") @[Forwarding.scala 29:22]
        skip @[Forwarding.scala 28:44]
      else : @[Forwarding.scala 32:44]
        node _T_12 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 31:31]
        node _T_13 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 31:57]
        node _T_14 = and(_T_12, _T_13) @[Forwarding.scala 31:42]
        node _T_15 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 32:26]
        node _T_16 = and(_T_14, _T_15) @[Forwarding.scala 31:72]
        when _T_16 : @[Forwarding.scala 32:44]
          io.forward_a <= UInt<2>("h02") @[Forwarding.scala 33:22]
          skip @[Forwarding.scala 32:44]
    node _T_17 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 37:26]
    node _T_18 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 37:54]
    node _T_19 = and(_T_17, _T_18) @[Forwarding.scala 37:38]
    node _T_20 = eq(io.MEMWB_rd, io.IDEX_rs1) @[Forwarding.scala 37:86]
    node _T_21 = and(_T_19, _T_20) @[Forwarding.scala 37:70]
    node _T_22 = eq(io.MEMWB_rd, io.IDEX_rs2) @[Forwarding.scala 37:119]
    node _T_23 = and(_T_21, _T_22) @[Forwarding.scala 37:103]
    node _T_24 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 38:30]
    node _T_25 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 38:56]
    node _T_26 = and(_T_24, _T_25) @[Forwarding.scala 38:41]
    node _T_27 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 38:87]
    node _T_28 = and(_T_26, _T_27) @[Forwarding.scala 38:71]
    node _T_29 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 38:120]
    node _T_30 = and(_T_28, _T_29) @[Forwarding.scala 38:104]
    node _T_31 = not(_T_30) @[Forwarding.scala 38:13]
    node _T_32 = and(_T_23, _T_31) @[Forwarding.scala 37:136]
    when _T_32 : @[Forwarding.scala 38:139]
      io.forward_a <= UInt<1>("h01") @[Forwarding.scala 39:22]
      io.forward_b <= UInt<1>("h01") @[Forwarding.scala 40:22]
      skip @[Forwarding.scala 38:139]
    else : @[Forwarding.scala 43:105]
      node _T_33 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 42:32]
      node _T_34 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 42:60]
      node _T_35 = and(_T_33, _T_34) @[Forwarding.scala 42:44]
      node _T_36 = eq(io.MEMWB_rd, io.IDEX_rs2) @[Forwarding.scala 42:92]
      node _T_37 = and(_T_35, _T_36) @[Forwarding.scala 42:76]
      node _T_38 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 43:30]
      node _T_39 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 43:56]
      node _T_40 = and(_T_38, _T_39) @[Forwarding.scala 43:41]
      node _T_41 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 43:87]
      node _T_42 = and(_T_40, _T_41) @[Forwarding.scala 43:71]
      node _T_43 = not(_T_42) @[Forwarding.scala 43:13]
      node _T_44 = and(_T_37, _T_43) @[Forwarding.scala 42:109]
      when _T_44 : @[Forwarding.scala 43:105]
        io.forward_b <= UInt<1>("h01") @[Forwarding.scala 44:22]
        skip @[Forwarding.scala 43:105]
      else : @[Forwarding.scala 47:105]
        node _T_45 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 46:32]
        node _T_46 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 46:60]
        node _T_47 = and(_T_45, _T_46) @[Forwarding.scala 46:44]
        node _T_48 = eq(io.MEMWB_rd, io.IDEX_rs1) @[Forwarding.scala 46:92]
        node _T_49 = and(_T_47, _T_48) @[Forwarding.scala 46:76]
        node _T_50 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 47:30]
        node _T_51 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 47:56]
        node _T_52 = and(_T_50, _T_51) @[Forwarding.scala 47:41]
        node _T_53 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 47:87]
        node _T_54 = and(_T_52, _T_53) @[Forwarding.scala 47:71]
        node _T_55 = not(_T_54) @[Forwarding.scala 47:13]
        node _T_56 = and(_T_49, _T_55) @[Forwarding.scala 46:109]
        when _T_56 : @[Forwarding.scala 47:105]
          io.forward_a <= UInt<1>("h01") @[Forwarding.scala 48:22]
          skip @[Forwarding.scala 47:105]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_inst : UInt<32>, flip ID_EX_memRead : UInt<1>, flip ID_EX_rd : UInt<5>, flip pc_in : SInt<32>, flip current_pc : SInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node Rs1 = bits(io.IF_ID_inst, 19, 15) @[HazardDetectionUnit.scala 21:26]
    node Rs2 = bits(io.IF_ID_inst, 24, 20) @[HazardDetectionUnit.scala 22:26]
    node _T = eq(io.ID_EX_memRead, UInt<1>("h01")) @[HazardDetectionUnit.scala 24:25]
    node _T_1 = eq(io.ID_EX_rd, Rs1) @[HazardDetectionUnit.scala 24:50]
    node _T_2 = eq(io.ID_EX_rd, Rs2) @[HazardDetectionUnit.scala 24:75]
    node _T_3 = or(_T_1, _T_2) @[HazardDetectionUnit.scala 24:59]
    node _T_4 = and(_T, _T_3) @[HazardDetectionUnit.scala 24:33]
    when _T_4 : @[HazardDetectionUnit.scala 24:86]
      io.inst_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 25:21]
      io.pc_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 26:19]
      io.ctrl_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 27:21]
      skip @[HazardDetectionUnit.scala 24:86]
    else : @[HazardDetectionUnit.scala 28:15]
      io.inst_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 29:21]
      io.pc_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 30:19]
      io.ctrl_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 31:21]
      skip @[HazardDetectionUnit.scala 28:15]
    io.inst_out <= io.IF_ID_inst @[HazardDetectionUnit.scala 33:15]
    io.pc_out <= io.pc_in @[HazardDetectionUnit.scala 34:13]
    io.current_pc_out <= io.current_pc @[HazardDetectionUnit.scala 35:21]
    
  module BranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_RD : UInt<5>, flip EX_MEM_RD : UInt<5>, flip MEM_WB_RD : UInt<5>, flip ID_EX_memRd : UInt<1>, flip EX_MEM_memRd : UInt<1>, flip MEM_WB_memRd : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[BranchForward.scala 22:18]
    io.forward_rs2 <= UInt<1>("h00") @[BranchForward.scala 23:18]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[BranchForward.scala 26:23]
    when _T : @[BranchForward.scala 26:32]
      node _T_1 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 28:22]
      node _T_2 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BranchForward.scala 28:48]
      node _T_3 = and(_T_1, _T_2) @[BranchForward.scala 28:30]
      when _T_3 : @[BranchForward.scala 28:57]
        node _T_4 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 29:24]
        node _T_5 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 29:50]
        node _T_6 = and(_T_4, _T_5) @[BranchForward.scala 29:35]
        when _T_6 : @[BranchForward.scala 29:62]
          io.forward_rs1 <= UInt<1>("h01") @[BranchForward.scala 30:24]
          io.forward_rs2 <= UInt<1>("h01") @[BranchForward.scala 31:24]
          skip @[BranchForward.scala 29:62]
        else : @[BranchForward.scala 32:42]
          node _T_7 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 32:30]
          when _T_7 : @[BranchForward.scala 32:42]
            io.forward_rs1 <= UInt<1>("h01") @[BranchForward.scala 33:24]
            skip @[BranchForward.scala 32:42]
          else : @[BranchForward.scala 34:42]
            node _T_8 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 34:30]
            when _T_8 : @[BranchForward.scala 34:42]
              io.forward_rs2 <= UInt<1>("h01") @[BranchForward.scala 35:24]
              skip @[BranchForward.scala 34:42]
        skip @[BranchForward.scala 28:57]
      node _T_9 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 40:23]
      node _T_10 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 40:50]
      node _T_11 = and(_T_9, _T_10) @[BranchForward.scala 40:31]
      when _T_11 : @[BranchForward.scala 40:59]
        node _T_12 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 41:25]
        node _T_13 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 41:52]
        node _T_14 = and(_T_12, _T_13) @[BranchForward.scala 41:36]
        node _T_15 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 41:80]
        node _T_16 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 41:103]
        node _T_17 = and(_T_15, _T_16) @[BranchForward.scala 41:88]
        node _T_18 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 41:129]
        node _T_19 = and(_T_17, _T_18) @[BranchForward.scala 41:114]
        node _T_20 = eq(_T_19, UInt<1>("h00")) @[BranchForward.scala 41:66]
        node _T_21 = and(_T_14, _T_20) @[BranchForward.scala 41:63]
        when _T_21 : @[BranchForward.scala 41:142]
          io.forward_rs1 <= UInt<2>("h02") @[BranchForward.scala 42:24]
          io.forward_rs2 <= UInt<2>("h02") @[BranchForward.scala 43:24]
          skip @[BranchForward.scala 41:142]
        else : @[BranchForward.scala 44:95]
          node _T_22 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 44:31]
          node _T_23 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 44:59]
          node _T_24 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 44:82]
          node _T_25 = and(_T_23, _T_24) @[BranchForward.scala 44:67]
          node _T_26 = eq(_T_25, UInt<1>("h00")) @[BranchForward.scala 44:45]
          node _T_27 = and(_T_22, _T_26) @[BranchForward.scala 44:42]
          when _T_27 : @[BranchForward.scala 44:95]
            io.forward_rs1 <= UInt<2>("h02") @[BranchForward.scala 45:24]
            skip @[BranchForward.scala 44:95]
          else : @[BranchForward.scala 46:95]
            node _T_28 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 46:31]
            node _T_29 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 46:59]
            node _T_30 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 46:82]
            node _T_31 = and(_T_29, _T_30) @[BranchForward.scala 46:67]
            node _T_32 = eq(_T_31, UInt<1>("h00")) @[BranchForward.scala 46:45]
            node _T_33 = and(_T_28, _T_32) @[BranchForward.scala 46:42]
            when _T_33 : @[BranchForward.scala 46:95]
              io.forward_rs2 <= UInt<2>("h02") @[BranchForward.scala 47:24]
              skip @[BranchForward.scala 46:95]
        skip @[BranchForward.scala 40:59]
      node _T_34 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 52:23]
      node _T_35 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 52:50]
      node _T_36 = and(_T_34, _T_35) @[BranchForward.scala 52:31]
      when _T_36 : @[BranchForward.scala 52:59]
        node _T_37 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 53:25]
        node _T_38 = eq(io.MEM_WB_RD, io.rs2) @[BranchForward.scala 53:52]
        node _T_39 = and(_T_37, _T_38) @[BranchForward.scala 53:36]
        node _T_40 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 53:80]
        node _T_41 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 53:103]
        node _T_42 = and(_T_40, _T_41) @[BranchForward.scala 53:88]
        node _T_43 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 53:129]
        node _T_44 = and(_T_42, _T_43) @[BranchForward.scala 53:114]
        node _T_45 = eq(_T_44, UInt<1>("h00")) @[BranchForward.scala 53:66]
        node _T_46 = and(_T_39, _T_45) @[BranchForward.scala 53:63]
        node _T_47 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 53:159]
        node _T_48 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 53:183]
        node _T_49 = and(_T_47, _T_48) @[BranchForward.scala 53:167]
        node _T_50 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 53:210]
        node _T_51 = and(_T_49, _T_50) @[BranchForward.scala 53:194]
        node _T_52 = eq(_T_51, UInt<1>("h00")) @[BranchForward.scala 53:144]
        node _T_53 = and(_T_46, _T_52) @[BranchForward.scala 53:141]
        when _T_53 : @[BranchForward.scala 53:223]
          io.forward_rs1 <= UInt<2>("h03") @[BranchForward.scala 54:24]
          io.forward_rs2 <= UInt<2>("h03") @[BranchForward.scala 55:24]
          skip @[BranchForward.scala 53:223]
        else : @[BranchForward.scala 56:149]
          node _T_54 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 56:31]
          node _T_55 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 56:59]
          node _T_56 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 56:82]
          node _T_57 = and(_T_55, _T_56) @[BranchForward.scala 56:67]
          node _T_58 = eq(_T_57, UInt<1>("h00")) @[BranchForward.scala 56:45]
          node _T_59 = and(_T_54, _T_58) @[BranchForward.scala 56:42]
          node _T_60 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 56:112]
          node _T_61 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 56:136]
          node _T_62 = and(_T_60, _T_61) @[BranchForward.scala 56:120]
          node _T_63 = eq(_T_62, UInt<1>("h00")) @[BranchForward.scala 56:97]
          node _T_64 = and(_T_59, _T_63) @[BranchForward.scala 56:94]
          when _T_64 : @[BranchForward.scala 56:149]
            io.forward_rs1 <= UInt<2>("h03") @[BranchForward.scala 57:24]
            skip @[BranchForward.scala 56:149]
          else : @[BranchForward.scala 58:149]
            node _T_65 = eq(io.MEM_WB_RD, io.rs2) @[BranchForward.scala 58:31]
            node _T_66 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 58:59]
            node _T_67 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 58:82]
            node _T_68 = and(_T_66, _T_67) @[BranchForward.scala 58:67]
            node _T_69 = eq(_T_68, UInt<1>("h00")) @[BranchForward.scala 58:45]
            node _T_70 = and(_T_65, _T_69) @[BranchForward.scala 58:42]
            node _T_71 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 58:112]
            node _T_72 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 58:136]
            node _T_73 = and(_T_71, _T_72) @[BranchForward.scala 58:120]
            node _T_74 = eq(_T_73, UInt<1>("h00")) @[BranchForward.scala 58:97]
            node _T_75 = and(_T_70, _T_74) @[BranchForward.scala 58:94]
            when _T_75 : @[BranchForward.scala 58:149]
              io.forward_rs2 <= UInt<2>("h03") @[BranchForward.scala 59:24]
              skip @[BranchForward.scala 58:149]
        skip @[BranchForward.scala 52:59]
      skip @[BranchForward.scala 26:32]
    else : @[BranchForward.scala 64:38]
      node _T_76 = eq(io.ctrl_branch, UInt<1>("h00")) @[BranchForward.scala 64:29]
      when _T_76 : @[BranchForward.scala 64:38]
        node _T_77 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 65:22]
        node _T_78 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BranchForward.scala 65:48]
        node _T_79 = and(_T_77, _T_78) @[BranchForward.scala 65:30]
        node _T_80 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 65:71]
        node _T_81 = and(_T_79, _T_80) @[BranchForward.scala 65:56]
        when _T_81 : @[BranchForward.scala 65:83]
          io.forward_rs1 <= UInt<3>("h06") @[BranchForward.scala 66:22]
          skip @[BranchForward.scala 65:83]
        else : @[BranchForward.scala 67:144]
          node _T_82 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 67:29]
          node _T_83 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 67:56]
          node _T_84 = and(_T_82, _T_83) @[BranchForward.scala 67:37]
          node _T_85 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 67:80]
          node _T_86 = and(_T_84, _T_85) @[BranchForward.scala 67:64]
          node _T_87 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 67:108]
          node _T_88 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 67:131]
          node _T_89 = and(_T_87, _T_88) @[BranchForward.scala 67:116]
          node _T_90 = eq(_T_89, UInt<1>("h00")) @[BranchForward.scala 67:94]
          node _T_91 = and(_T_86, _T_90) @[BranchForward.scala 67:91]
          when _T_91 : @[BranchForward.scala 67:144]
            io.forward_rs1 <= UInt<3>("h07") @[BranchForward.scala 68:22]
            skip @[BranchForward.scala 67:144]
          else : @[BranchForward.scala 69:144]
            node _T_92 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 69:29]
            node _T_93 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 69:56]
            node _T_94 = and(_T_92, _T_93) @[BranchForward.scala 69:37]
            node _T_95 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 69:80]
            node _T_96 = and(_T_94, _T_95) @[BranchForward.scala 69:64]
            node _T_97 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 69:108]
            node _T_98 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 69:131]
            node _T_99 = and(_T_97, _T_98) @[BranchForward.scala 69:116]
            node _T_100 = eq(_T_99, UInt<1>("h00")) @[BranchForward.scala 69:94]
            node _T_101 = and(_T_96, _T_100) @[BranchForward.scala 69:91]
            when _T_101 : @[BranchForward.scala 69:144]
              io.forward_rs1 <= UInt<4>("h09") @[BranchForward.scala 70:22]
              skip @[BranchForward.scala 69:144]
            else : @[BranchForward.scala 71:198]
              node _T_102 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 71:29]
              node _T_103 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 71:56]
              node _T_104 = and(_T_102, _T_103) @[BranchForward.scala 71:37]
              node _T_105 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 71:80]
              node _T_106 = and(_T_104, _T_105) @[BranchForward.scala 71:64]
              node _T_107 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 71:108]
              node _T_108 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 71:131]
              node _T_109 = and(_T_107, _T_108) @[BranchForward.scala 71:116]
              node _T_110 = eq(_T_109, UInt<1>("h00")) @[BranchForward.scala 71:94]
              node _T_111 = and(_T_106, _T_110) @[BranchForward.scala 71:91]
              node _T_112 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 71:161]
              node _T_113 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 71:185]
              node _T_114 = and(_T_112, _T_113) @[BranchForward.scala 71:169]
              node _T_115 = eq(_T_114, UInt<1>("h00")) @[BranchForward.scala 71:146]
              node _T_116 = and(_T_111, _T_115) @[BranchForward.scala 71:143]
              when _T_116 : @[BranchForward.scala 71:198]
                io.forward_rs1 <= UInt<4>("h08") @[BranchForward.scala 72:22]
                skip @[BranchForward.scala 71:198]
              else : @[BranchForward.scala 73:198]
                node _T_117 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 73:29]
                node _T_118 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 73:56]
                node _T_119 = and(_T_117, _T_118) @[BranchForward.scala 73:37]
                node _T_120 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 73:80]
                node _T_121 = and(_T_119, _T_120) @[BranchForward.scala 73:64]
                node _T_122 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 73:108]
                node _T_123 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 73:131]
                node _T_124 = and(_T_122, _T_123) @[BranchForward.scala 73:116]
                node _T_125 = eq(_T_124, UInt<1>("h00")) @[BranchForward.scala 73:94]
                node _T_126 = and(_T_121, _T_125) @[BranchForward.scala 73:91]
                node _T_127 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 73:161]
                node _T_128 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 73:185]
                node _T_129 = and(_T_127, _T_128) @[BranchForward.scala 73:169]
                node _T_130 = eq(_T_129, UInt<1>("h00")) @[BranchForward.scala 73:146]
                node _T_131 = and(_T_126, _T_130) @[BranchForward.scala 73:143]
                when _T_131 : @[BranchForward.scala 73:198]
                  io.forward_rs1 <= UInt<4>("h0a") @[BranchForward.scala 74:22]
                  skip @[BranchForward.scala 73:198]
        skip @[BranchForward.scala 64:38]
    
  module StructuralHazard : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_Rd : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_Rd, io.rs1) @[StructuralHazard.scala 17:40]
    node _T_1 = and(io.MEM_WB_regWr, _T) @[StructuralHazard.scala 17:24]
    when _T_1 : @[StructuralHazard.scala 17:52]
      io.fwd_rs1 <= UInt<1>("h01") @[StructuralHazard.scala 18:16]
      skip @[StructuralHazard.scala 17:52]
    else : @[StructuralHazard.scala 19:15]
      io.fwd_rs1 <= UInt<1>("h00") @[StructuralHazard.scala 20:16]
      skip @[StructuralHazard.scala 19:15]
    node _T_2 = eq(io.MEM_WB_Rd, io.rs2) @[StructuralHazard.scala 24:40]
    node _T_3 = and(io.MEM_WB_regWr, _T_2) @[StructuralHazard.scala 24:24]
    when _T_3 : @[StructuralHazard.scala 24:52]
      io.fwd_rs2 <= UInt<1>("h01") @[StructuralHazard.scala 25:16]
      skip @[StructuralHazard.scala 24:52]
    else : @[StructuralHazard.scala 26:15]
      io.fwd_rs2 <= UInt<1>("h00") @[StructuralHazard.scala 27:16]
      skip @[StructuralHazard.scala 26:15]
    
  module core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<4>}
    
    inst IF_ID_ of IF_ID @[core.scala 9:26]
    IF_ID_.clock <= clock
    IF_ID_.reset <= reset
    inst ID_EX_ of ID_EX @[core.scala 10:26]
    ID_EX_.clock <= clock
    ID_EX_.reset <= reset
    inst EX_MEM_M of EX_MEM @[core.scala 11:28]
    EX_MEM_M.clock <= clock
    EX_MEM_M.reset <= reset
    inst MEM_WB_M of MEM_WB @[core.scala 12:28]
    MEM_WB_M.clock <= clock
    MEM_WB_M.reset <= reset
    inst PC of PC @[core.scala 15:22]
    PC.clock <= clock
    PC.reset <= reset
    inst PC4 of PC4 @[core.scala 16:24]
    PC4.clock <= clock
    PC4.reset <= reset
    inst InstMemory of InstMem @[core.scala 19:30]
    InstMemory.clock <= clock
    InstMemory.reset <= reset
    inst DataMemory of Datamem @[core.scala 20:30]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    inst control_module of Control @[core.scala 23:33]
    control_module.clock <= clock
    control_module.reset <= reset
    inst ImmGen of ImmGenerator @[core.scala 24:27]
    ImmGen.clock <= clock
    ImmGen.reset <= reset
    inst RegFile of RegisterFile @[core.scala 25:27]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst ALU_Control of AluControl @[core.scala 26:32]
    ALU_Control.clock <= clock
    ALU_Control.reset <= reset
    inst ALU of ALU @[core.scala 28:24]
    ALU.clock <= clock
    ALU.reset <= reset
    inst Branch_M of Branch @[core.scala 30:29]
    Branch_M.clock <= clock
    Branch_M.reset <= reset
    inst JALR of Jalr @[core.scala 31:26]
    JALR.clock <= clock
    JALR.reset <= reset
    inst Forwarding of Forwarding @[core.scala 34:30]
    Forwarding.clock <= clock
    Forwarding.reset <= reset
    inst HazardDetect of HazardDetection @[core.scala 35:32]
    HazardDetect.clock <= clock
    HazardDetect.reset <= reset
    inst Branch_Forward of BranchForward @[core.scala 36:35]
    Branch_Forward.clock <= clock
    Branch_Forward.reset <= reset
    inst Structural of StructuralHazard @[core.scala 37:30]
    Structural.clock <= clock
    Structural.reset <= reset
    wire PC_F : SInt @[core.scala 39:20]
    node _T = eq(HazardDetect.io.pc_forward, UInt<1>("h00")) @[core.scala 40:38]
    when _T : @[core.scala 40:47]
      node _PC_F_T = asSInt(PC4.io.out) @[core.scala 41:26]
      PC_F <= _PC_F_T @[core.scala 41:12]
      skip @[core.scala 40:47]
    else : @[core.scala 42:54]
      node _T_1 = eq(HazardDetect.io.pc_forward, UInt<1>("h01")) @[core.scala 42:45]
      when _T_1 : @[core.scala 42:54]
        PC_F <= HazardDetect.io.pc_out @[core.scala 43:12]
        skip @[core.scala 42:54]
      else : @[core.scala 44:18]
        PC_F <= asSInt(UInt<1>("h00")) @[core.scala 45:12]
        skip @[core.scala 44:18]
    PC.io.in <= PC_F @[core.scala 48:14]
    node _PC4_io_pc_T = asUInt(PC.io.out) @[core.scala 49:28]
    PC4.io.pc <= _PC4_io_pc_T @[core.scala 49:15]
    node _InstMemory_io_addr_T = asUInt(PC.io.out) @[core.scala 50:37]
    InstMemory.io.addr <= _InstMemory_io_addr_T @[core.scala 50:24]
    wire PC_for : SInt @[core.scala 52:22]
    node _T_2 = eq(HazardDetect.io.inst_forward, UInt<1>("h00")) @[core.scala 53:40]
    when _T_2 : @[core.scala 53:49]
      PC_for <= PC.io.out @[core.scala 54:14]
      skip @[core.scala 53:49]
    else : @[core.scala 55:56]
      node _T_3 = eq(HazardDetect.io.inst_forward, UInt<1>("h01")) @[core.scala 55:47]
      when _T_3 : @[core.scala 55:56]
        PC_for <= HazardDetect.io.current_pc_out @[core.scala 56:14]
        skip @[core.scala 55:56]
      else : @[core.scala 57:18]
        PC_for <= asSInt(UInt<1>("h00")) @[core.scala 58:14]
        skip @[core.scala 57:18]
    wire Instruction_F : UInt @[core.scala 61:29]
    node _T_4 = eq(HazardDetect.io.inst_forward, UInt<1>("h00")) @[core.scala 62:40]
    when _T_4 : @[core.scala 62:49]
      Instruction_F <= InstMemory.io.data @[core.scala 63:21]
      skip @[core.scala 62:49]
    else : @[core.scala 64:56]
      node _T_5 = eq(HazardDetect.io.inst_forward, UInt<1>("h01")) @[core.scala 64:47]
      when _T_5 : @[core.scala 64:56]
        Instruction_F <= HazardDetect.io.inst_out @[core.scala 65:21]
        skip @[core.scala 64:56]
      else : @[core.scala 66:18]
        Instruction_F <= UInt<1>("h00") @[core.scala 67:21]
        skip @[core.scala 66:18]
    IF_ID_.io.pc_in <= PC.io.out @[core.scala 71:21]
    IF_ID_.io.pc4_in <= PC4.io.out @[core.scala 72:23]
    IF_ID_.io.SelectedPC <= PC_for @[core.scala 73:26]
    IF_ID_.io.SelectedInstr <= Instruction_F @[core.scala 74:29]
    ImmGen.io.instr <= IF_ID_.io.SelectedInstr_out @[core.scala 77:21]
    node _ImmGen_io_pc_T = asUInt(IF_ID_.io.SelectedPC_out) @[core.scala 78:47]
    ImmGen.io.pc <= _ImmGen_io_pc_T @[core.scala 78:19]
    node _control_module_io_opcode_T = bits(IF_ID_.io.SelectedInstr_out, 6, 0) @[core.scala 81:60]
    control_module.io.opcode <= _control_module_io_opcode_T @[core.scala 81:30]
    node _T_6 = eq(control_module.io.opcode, UInt<6>("h033")) @[core.scala 83:36]
    node _T_7 = eq(control_module.io.opcode, UInt<5>("h013")) @[core.scala 84:32]
    node _T_8 = or(_T_6, _T_7) @[core.scala 83:45]
    node _T_9 = eq(control_module.io.opcode, UInt<6>("h023")) @[core.scala 85:32]
    node _T_10 = or(_T_8, _T_9) @[core.scala 84:41]
    node _T_11 = eq(control_module.io.opcode, UInt<2>("h03")) @[core.scala 86:32]
    node _T_12 = or(_T_10, _T_11) @[core.scala 85:41]
    node _T_13 = eq(control_module.io.opcode, UInt<7>("h063")) @[core.scala 87:32]
    node _T_14 = or(_T_12, _T_13) @[core.scala 86:40]
    node _T_15 = eq(control_module.io.opcode, UInt<7>("h067")) @[core.scala 88:32]
    node _T_16 = or(_T_14, _T_15) @[core.scala 87:41]
    when _T_16 : @[core.scala 88:43]
      node _RegFile_io_rs1_T = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[core.scala 89:52]
      RegFile.io.rs1 <= _RegFile_io_rs1_T @[core.scala 89:22]
      skip @[core.scala 88:43]
    else : @[core.scala 90:18]
      RegFile.io.rs1 <= UInt<1>("h00") @[core.scala 91:22]
      skip @[core.scala 90:18]
    node _T_17 = eq(control_module.io.opcode, UInt<6>("h033")) @[core.scala 95:36]
    node _T_18 = eq(control_module.io.opcode, UInt<6>("h023")) @[core.scala 96:32]
    node _T_19 = or(_T_17, _T_18) @[core.scala 95:45]
    node _T_20 = eq(control_module.io.opcode, UInt<7>("h063")) @[core.scala 97:32]
    node _T_21 = or(_T_19, _T_20) @[core.scala 96:41]
    when _T_21 : @[core.scala 97:42]
      node _RegFile_io_rs2_T = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[core.scala 98:52]
      RegFile.io.rs2 <= _RegFile_io_rs2_T @[core.scala 98:22]
      skip @[core.scala 97:42]
    else : @[core.scala 99:18]
      RegFile.io.rs2 <= UInt<1>("h00") @[core.scala 100:22]
      skip @[core.scala 99:18]
    RegFile.io.reg_write <= control_module.io.reg_write @[core.scala 103:26]
    wire ImmValue : SInt @[core.scala 106:24]
    node _T_22 = eq(control_module.io.extend, UInt<1>("h00")) @[core.scala 108:36]
    when _T_22 : @[core.scala 108:45]
      ImmValue <= ImmGen.io.I_type @[core.scala 109:16]
      skip @[core.scala 108:45]
    else : @[core.scala 110:52]
      node _T_23 = eq(control_module.io.extend, UInt<1>("h01")) @[core.scala 110:43]
      when _T_23 : @[core.scala 110:52]
        ImmValue <= ImmGen.io.S_type @[core.scala 111:16]
        skip @[core.scala 110:52]
      else : @[core.scala 112:52]
        node _T_24 = eq(control_module.io.extend, UInt<2>("h02")) @[core.scala 112:43]
        when _T_24 : @[core.scala 112:52]
          ImmValue <= ImmGen.io.U_type @[core.scala 113:16]
          skip @[core.scala 112:52]
        else : @[core.scala 114:18]
          ImmValue <= asSInt(UInt<1>("h00")) @[core.scala 115:16]
          skip @[core.scala 114:18]
    node _Structural_io_rs1_T = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[core.scala 119:54]
    Structural.io.rs1 <= _Structural_io_rs1_T @[core.scala 119:24]
    node _Structural_io_rs2_T = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[core.scala 120:55]
    Structural.io.rs2 <= _Structural_io_rs2_T @[core.scala 120:25]
    Structural.io.MEM_WB_regWr <= MEM_WB_M.io.EXMEM_REG_W @[core.scala 121:32]
    Structural.io.MEM_WB_Rd <= MEM_WB_M.io.MEMWB_rd_out @[core.scala 122:29]
    wire S_rs1DataIn : SInt<32> @[core.scala 124:27]
    wire S_rs2DataIn : SInt<32> @[core.scala 125:27]
    node _T_25 = eq(Structural.io.fwd_rs1, UInt<1>("h00")) @[core.scala 127:33]
    when _T_25 : @[core.scala 127:42]
      S_rs1DataIn <= RegFile.io.rdata1 @[core.scala 128:19]
      skip @[core.scala 127:42]
    else : @[core.scala 129:48]
      node _T_26 = eq(Structural.io.fwd_rs1, UInt<1>("h01")) @[core.scala 129:39]
      when _T_26 : @[core.scala 129:48]
        S_rs1DataIn <= RegFile.io.w_data @[core.scala 130:19]
        skip @[core.scala 129:48]
      else : @[core.scala 131:17]
        S_rs1DataIn <= asSInt(UInt<1>("h00")) @[core.scala 132:19]
        skip @[core.scala 131:17]
    node _T_27 = eq(Structural.io.fwd_rs2, UInt<1>("h00")) @[core.scala 135:33]
    when _T_27 : @[core.scala 135:42]
      S_rs2DataIn <= RegFile.io.rdata2 @[core.scala 136:19]
      skip @[core.scala 135:42]
    else : @[core.scala 137:48]
      node _T_28 = eq(Structural.io.fwd_rs2, UInt<1>("h01")) @[core.scala 137:39]
      when _T_28 : @[core.scala 137:48]
        S_rs2DataIn <= RegFile.io.w_data @[core.scala 138:19]
        skip @[core.scala 137:48]
      else : @[core.scala 139:17]
        S_rs2DataIn <= asSInt(UInt<1>("h00")) @[core.scala 140:19]
        skip @[core.scala 139:17]
    ID_EX_.io.rs1_data_in <= S_rs1DataIn @[core.scala 143:27]
    ID_EX_.io.rs2_data_in <= S_rs2DataIn @[core.scala 144:28]
    node _T_29 = eq(HazardDetect.io.ctrl_forward, UInt<1>("h01")) @[core.scala 147:39]
    when _T_29 : @[core.scala 147:51]
      ID_EX_.io.ctrl_MemWr_in <= UInt<1>("h00") @[core.scala 148:33]
      ID_EX_.io.ctrl_MemRd_in <= UInt<1>("h00") @[core.scala 149:34]
      ID_EX_.io.ctrl_MemToReg_in <= UInt<1>("h00") @[core.scala 150:36]
      ID_EX_.io.ctrl_Reg_W_in <= UInt<1>("h00") @[core.scala 151:34]
      ID_EX_.io.ctrl_AluOp_in <= UInt<1>("h00") @[core.scala 152:34]
      ID_EX_.io.ctrl_OpB_in <= UInt<1>("h00") @[core.scala 153:33]
      ID_EX_.io.ctrl_Branch_in <= UInt<1>("h00") @[core.scala 154:36]
      ID_EX_.io.ctrl_nextpc_in <= UInt<1>("h00") @[core.scala 155:36]
      skip @[core.scala 147:51]
    else : @[core.scala 156:17]
      ID_EX_.io.ctrl_MemWr_in <= control_module.io.mem_write @[core.scala 157:33]
      ID_EX_.io.ctrl_MemRd_in <= control_module.io.mem_read @[core.scala 158:33]
      ID_EX_.io.ctrl_MemToReg_in <= control_module.io.men_to_reg @[core.scala 159:38]
      ID_EX_.io.ctrl_Reg_W_in <= control_module.io.reg_write @[core.scala 160:34]
      ID_EX_.io.ctrl_AluOp_in <= control_module.io.alu_operation @[core.scala 161:34]
      ID_EX_.io.ctrl_OpB_in <= control_module.io.operand_B @[core.scala 162:32]
      ID_EX_.io.ctrl_Branch_in <= control_module.io.branch @[core.scala 163:34]
      ID_EX_.io.ctrl_nextpc_in <= control_module.io.next_pc_sel @[core.scala 164:34]
      skip @[core.scala 156:17]
    HazardDetect.io.IF_ID_inst <= IF_ID_.io.SelectedInstr_out @[core.scala 167:32]
    HazardDetect.io.ID_EX_memRead <= ID_EX_.io.ctrl_MemRd_out @[core.scala 168:35]
    HazardDetect.io.ID_EX_rd <= ID_EX_.io.rd_out @[core.scala 169:30]
    node _HazardDetect_io_pc_in_T = asSInt(IF_ID_.io.pc4_out) @[core.scala 170:48]
    HazardDetect.io.pc_in <= _HazardDetect_io_pc_in_T @[core.scala 170:27]
    HazardDetect.io.current_pc <= IF_ID_.io.SelectedPC_out @[core.scala 171:32]
    MEM_WB_M.io.EXMEM_MEMRD <= EX_MEM_M.io.EXMEM_memRd_out @[core.scala 173:29]
    Branch_Forward.io.ID_EX_RD <= ID_EX_.io.rd_out @[core.scala 176:32]
    Branch_Forward.io.EX_MEM_RD <= EX_MEM_M.io.EXMEM_rd_out @[core.scala 177:33]
    Branch_Forward.io.MEM_WB_RD <= MEM_WB_M.io.MEMWB_rd_out @[core.scala 178:33]
    Branch_Forward.io.ID_EX_memRd <= ID_EX_.io.ctrl_MemRd_out @[core.scala 179:35]
    Branch_Forward.io.EX_MEM_memRd <= EX_MEM_M.io.EXMEM_memRd_out @[core.scala 180:37]
    Branch_Forward.io.MEM_WB_memRd <= MEM_WB_M.io.MEMWB_memRd_out @[core.scala 181:37]
    node _Branch_Forward_io_rs1_T = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[core.scala 182:57]
    Branch_Forward.io.rs1 <= _Branch_Forward_io_rs1_T @[core.scala 182:27]
    node _Branch_Forward_io_rs2_T = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[core.scala 183:57]
    Branch_Forward.io.rs2 <= _Branch_Forward_io_rs2_T @[core.scala 183:27]
    Branch_Forward.io.ctrl_branch <= control_module.io.branch @[core.scala 184:35]
    node _Branch_M_io_arg_x_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_1 = mux(_Branch_M_io_arg_x_T, RegFile.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_3 = mux(_Branch_M_io_arg_x_T_2, ALU.io.out, _Branch_M_io_arg_x_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_5 = mux(_Branch_M_io_arg_x_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_x_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_7 = mux(_Branch_M_io_arg_x_T_6, RegFile.io.w_data, _Branch_M_io_arg_x_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_9 = mux(_Branch_M_io_arg_x_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_x_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_11 = mux(_Branch_M_io_arg_x_T_10, RegFile.io.w_data, _Branch_M_io_arg_x_T_9) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_12 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_13 = mux(_Branch_M_io_arg_x_T_12, RegFile.io.rdata1, _Branch_M_io_arg_x_T_11) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_14 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_15 = mux(_Branch_M_io_arg_x_T_14, RegFile.io.rdata1, _Branch_M_io_arg_x_T_13) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_16 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_17 = mux(_Branch_M_io_arg_x_T_16, RegFile.io.rdata1, _Branch_M_io_arg_x_T_15) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_18 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_19 = mux(_Branch_M_io_arg_x_T_18, RegFile.io.rdata1, _Branch_M_io_arg_x_T_17) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_20 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_21 = mux(_Branch_M_io_arg_x_T_20, RegFile.io.rdata1, _Branch_M_io_arg_x_T_19) @[Mux.scala 80:57]
    Branch_M.io.arg_x <= _Branch_M_io_arg_x_T_21 @[core.scala 186:23]
    node _JALR_io_rdata1_T = asUInt(RegFile.io.rdata1) @[core.scala 201:36]
    node _JALR_io_rdata1_T_1 = asUInt(RegFile.io.rdata1) @[core.scala 202:36]
    node _JALR_io_rdata1_T_2 = asUInt(RegFile.io.rdata1) @[core.scala 203:36]
    node _JALR_io_rdata1_T_3 = asUInt(RegFile.io.rdata1) @[core.scala 204:36]
    node _JALR_io_rdata1_T_4 = asUInt(RegFile.io.rdata1) @[core.scala 205:36]
    node _JALR_io_rdata1_T_5 = asUInt(RegFile.io.rdata1) @[core.scala 206:36]
    node _JALR_io_rdata1_T_6 = asUInt(ALU.io.out) @[core.scala 207:29]
    node _JALR_io_rdata1_T_7 = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[core.scala 208:44]
    node _JALR_io_rdata1_T_8 = asUInt(RegFile.io.w_data) @[core.scala 209:36]
    node _JALR_io_rdata1_T_9 = asUInt(DataMemory.io.dataOut) @[core.scala 210:40]
    node _JALR_io_rdata1_T_10 = asUInt(RegFile.io.w_data) @[core.scala 211:37]
    node _JALR_io_rdata1_T_11 = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_12 = mux(_JALR_io_rdata1_T_11, _JALR_io_rdata1_T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_13 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_14 = mux(_JALR_io_rdata1_T_13, _JALR_io_rdata1_T_1, _JALR_io_rdata1_T_12) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_15 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_16 = mux(_JALR_io_rdata1_T_15, _JALR_io_rdata1_T_2, _JALR_io_rdata1_T_14) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_17 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_18 = mux(_JALR_io_rdata1_T_17, _JALR_io_rdata1_T_3, _JALR_io_rdata1_T_16) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_19 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_20 = mux(_JALR_io_rdata1_T_19, _JALR_io_rdata1_T_4, _JALR_io_rdata1_T_18) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_21 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_22 = mux(_JALR_io_rdata1_T_21, _JALR_io_rdata1_T_5, _JALR_io_rdata1_T_20) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_23 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_24 = mux(_JALR_io_rdata1_T_23, _JALR_io_rdata1_T_6, _JALR_io_rdata1_T_22) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_25 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_26 = mux(_JALR_io_rdata1_T_25, _JALR_io_rdata1_T_7, _JALR_io_rdata1_T_24) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_27 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_28 = mux(_JALR_io_rdata1_T_27, _JALR_io_rdata1_T_8, _JALR_io_rdata1_T_26) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_29 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_30 = mux(_JALR_io_rdata1_T_29, _JALR_io_rdata1_T_9, _JALR_io_rdata1_T_28) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_31 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_32 = mux(_JALR_io_rdata1_T_31, _JALR_io_rdata1_T_10, _JALR_io_rdata1_T_30) @[Mux.scala 80:57]
    JALR.io.rdata1 <= _JALR_io_rdata1_T_32 @[core.scala 200:20]
    node _JALR_io_imme_T = asUInt(ImmValue) @[core.scala 213:30]
    JALR.io.imme <= _JALR_io_imme_T @[core.scala 213:18]
    node _Branch_M_io_arg_y_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_1 = mux(_Branch_M_io_arg_y_T, RegFile.io.rdata2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_3 = mux(_Branch_M_io_arg_y_T_2, ALU.io.out, _Branch_M_io_arg_y_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_5 = mux(_Branch_M_io_arg_y_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_y_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_7 = mux(_Branch_M_io_arg_y_T_6, RegFile.io.w_data, _Branch_M_io_arg_y_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_9 = mux(_Branch_M_io_arg_y_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_y_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_11 = mux(_Branch_M_io_arg_y_T_10, RegFile.io.w_data, _Branch_M_io_arg_y_T_9) @[Mux.scala 80:57]
    Branch_M.io.arg_y <= _Branch_M_io_arg_y_T_11 @[core.scala 215:23]
    node _Branch_M_io_fnct3_T = bits(IF_ID_.io.SelectedInstr_out, 14, 12) @[core.scala 223:53]
    Branch_M.io.fnct3 <= _Branch_M_io_fnct3_T @[core.scala 223:23]
    Branch_M.io.branch <= control_module.io.branch @[core.scala 224:24]
    node _T_30 = eq(HazardDetect.io.pc_forward, UInt<1>("h01")) @[core.scala 226:37]
    when _T_30 : @[core.scala 226:46]
      PC.io.in <= HazardDetect.io.pc_out @[core.scala 227:18]
      skip @[core.scala 226:46]
    else : @[core.scala 228:17]
      node _T_31 = eq(control_module.io.next_pc_sel, UInt<1>("h01")) @[core.scala 229:44]
      when _T_31 : @[core.scala 229:57]
        node _T_32 = eq(Branch_M.io.br_taken, UInt<1>("h01")) @[core.scala 230:39]
        node _T_33 = eq(control_module.io.branch, UInt<1>("h01")) @[core.scala 230:75]
        node _T_34 = and(_T_32, _T_33) @[core.scala 230:47]
        when _T_34 : @[core.scala 230:84]
          PC.io.in <= ImmGen.io.SB_type @[core.scala 231:26]
          IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[core.scala 232:33]
          IF_ID_.io.pc4_in <= UInt<1>("h00") @[core.scala 233:34]
          IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[core.scala 234:37]
          IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[core.scala 235:41]
          skip @[core.scala 230:84]
        else : @[core.scala 236:25]
          node _PC_io_in_T = asSInt(PC4.io.out) @[core.scala 237:40]
          PC.io.in <= _PC_io_in_T @[core.scala 237:26]
          skip @[core.scala 236:25]
        skip @[core.scala 229:57]
      else : @[core.scala 239:63]
        node _T_35 = eq(control_module.io.next_pc_sel, UInt<2>("h02")) @[core.scala 239:50]
        when _T_35 : @[core.scala 239:63]
          PC.io.in <= ImmGen.io.UJ_type @[core.scala 240:22]
          IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[core.scala 241:29]
          IF_ID_.io.pc4_in <= UInt<1>("h00") @[core.scala 242:30]
          IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[core.scala 243:33]
          IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[core.scala 244:37]
          skip @[core.scala 239:63]
        else : @[core.scala 245:63]
          node _T_36 = eq(control_module.io.next_pc_sel, UInt<2>("h03")) @[core.scala 245:50]
          when _T_36 : @[core.scala 245:63]
            node _PC_io_in_T_1 = asSInt(JALR.io.out) @[core.scala 246:37]
            PC.io.in <= _PC_io_in_T_1 @[core.scala 246:22]
            IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[core.scala 247:29]
            IF_ID_.io.pc4_in <= UInt<1>("h00") @[core.scala 248:30]
            IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[core.scala 249:33]
            IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[core.scala 250:37]
            skip @[core.scala 245:63]
          else : @[core.scala 251:21]
            node _PC_io_in_T_2 = asSInt(PC4.io.out) @[core.scala 252:36]
            PC.io.in <= _PC_io_in_T_2 @[core.scala 252:22]
            skip @[core.scala 251:21]
      skip @[core.scala 228:17]
    ID_EX_.io.rs1_in <= RegFile.io.rs1 @[core.scala 256:33]
    ID_EX_.io.rs2_in <= RegFile.io.rs2 @[core.scala 257:33]
    ID_EX_.io.imm <= ImmValue @[core.scala 258:33]
    node _ID_EX__io_func3_in_T = bits(IF_ID_.io.SelectedInstr_out, 14, 12) @[core.scala 259:63]
    ID_EX_.io.func3_in <= _ID_EX__io_func3_in_T @[core.scala 259:33]
    node _ID_EX__io_func7_in_T = bits(IF_ID_.io.SelectedInstr_out, 30, 30) @[core.scala 260:63]
    ID_EX_.io.func7_in <= _ID_EX__io_func7_in_T @[core.scala 260:33]
    node _ID_EX__io_rd_in_T = bits(IF_ID_.io.SelectedInstr_out, 11, 7) @[core.scala 261:63]
    ID_EX_.io.rd_in <= _ID_EX__io_rd_in_T @[core.scala 261:33]
    ALU_Control.io.aluOp <= ID_EX_.io.ctrl_AluOp_out @[core.scala 263:37]
    ALU.io.alu_Op <= ALU_Control.io.out @[core.scala 264:37]
    ALU_Control.io.func3 <= ID_EX_.io.func3_out @[core.scala 265:37]
    ALU_Control.io.func7 <= ID_EX_.io.func7_out @[core.scala 266:37]
    EX_MEM_M.io.IDEX_rd <= ID_EX_.io.rd_out @[core.scala 267:37]
    Forwarding.io.IDEX_rs1 <= ID_EX_.io.rs1_out @[core.scala 270:35]
    Forwarding.io.IDEX_rs2 <= ID_EX_.io.rs2_out @[core.scala 271:35]
    Forwarding.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[core.scala 272:35]
    Forwarding.io.EXMEM_regWr <= EX_MEM_M.io.EXMEM_reg_w_out @[core.scala 273:35]
    Forwarding.io.MEMWB_rd <= MEM_WB_M.io.MEMWB_rd_out @[core.scala 274:35]
    Forwarding.io.MEMWB_regWr <= MEM_WB_M.io.MEMWB_reg_w_out @[core.scala 275:35]
    ID_EX_.io.ctrl_OpA_in <= control_module.io.operand_A @[core.scala 277:27]
    ID_EX_.io.IFID_pc4_in <= IF_ID_.io.pc4_out @[core.scala 278:27]
    wire d : SInt<32> @[core.scala 280:17]
    node _T_37 = eq(ID_EX_.io.ctrl_OpA_out, UInt<1>("h01")) @[core.scala 282:34]
    when _T_37 : @[core.scala 282:47]
      node _ALU_io_in_A_T = asSInt(ID_EX_.io.IFID_pc4_out) @[core.scala 283:47]
      ALU.io.in_A <= _ALU_io_in_A_T @[core.scala 283:21]
      skip @[core.scala 282:47]
    else : @[core.scala 284:17]
      node _T_38 = eq(Forwarding.io.forward_a, UInt<1>("h00")) @[core.scala 286:38]
      when _T_38 : @[core.scala 286:51]
        ALU.io.in_A <= ID_EX_.io.rs1_data_out @[core.scala 287:25]
        skip @[core.scala 286:51]
      else : @[core.scala 288:57]
        node _T_39 = eq(Forwarding.io.forward_a, UInt<1>("h01")) @[core.scala 288:44]
        when _T_39 : @[core.scala 288:57]
          ALU.io.in_A <= d @[core.scala 289:25]
          skip @[core.scala 288:57]
        else : @[core.scala 290:57]
          node _T_40 = eq(Forwarding.io.forward_a, UInt<2>("h02")) @[core.scala 290:44]
          when _T_40 : @[core.scala 290:57]
            ALU.io.in_A <= EX_MEM_M.io.EXMEM_alu_out @[core.scala 291:25]
            skip @[core.scala 290:57]
          else : @[core.scala 292:21]
            ALU.io.in_A <= ID_EX_.io.rs1_data_out @[core.scala 293:25]
            skip @[core.scala 292:21]
      skip @[core.scala 284:17]
    wire RS2_value : SInt<32> @[core.scala 297:25]
    node _T_41 = eq(Forwarding.io.forward_b, UInt<1>("h00")) @[core.scala 298:35]
    when _T_41 : @[core.scala 298:44]
      RS2_value <= ID_EX_.io.rs2_data_out @[core.scala 299:17]
      skip @[core.scala 298:44]
    else : @[core.scala 300:50]
      node _T_42 = eq(Forwarding.io.forward_b, UInt<1>("h01")) @[core.scala 300:41]
      when _T_42 : @[core.scala 300:50]
        RS2_value <= d @[core.scala 301:17]
        skip @[core.scala 300:50]
      else : @[core.scala 302:50]
        node _T_43 = eq(Forwarding.io.forward_b, UInt<2>("h02")) @[core.scala 302:41]
        when _T_43 : @[core.scala 302:50]
          RS2_value <= EX_MEM_M.io.EXMEM_alu_out @[core.scala 303:17]
          skip @[core.scala 302:50]
        else : @[core.scala 304:17]
          RS2_value <= asSInt(UInt<1>("h00")) @[core.scala 305:17]
          skip @[core.scala 304:17]
    node _T_44 = eq(ID_EX_.io.ctrl_OpB_out, UInt<1>("h00")) @[core.scala 307:34]
    when _T_44 : @[core.scala 307:43]
      ALU.io.in_B <= RS2_value @[core.scala 308:21]
      skip @[core.scala 307:43]
    else : @[core.scala 309:17]
      ALU.io.in_B <= ID_EX_.io.imm_out @[core.scala 310:21]
      skip @[core.scala 309:17]
    EX_MEM_M.io.IDEX_MEMRD <= ID_EX_.io.ctrl_MemRd_out @[core.scala 314:37]
    EX_MEM_M.io.IDEX_MEMWR <= ID_EX_.io.ctrl_MemWr_out @[core.scala 315:37]
    EX_MEM_M.io.IDEX_MEMTOREG <= ID_EX_.io.ctrl_MemToReg_out @[core.scala 316:37]
    EX_MEM_M.io.IDEX_REG_W <= ID_EX_.io.ctrl_Reg_W_out @[core.scala 317:37]
    EX_MEM_M.io.IDEX_rs2 <= RS2_value @[core.scala 318:37]
    EX_MEM_M.io.alu_out <= ALU.io.out @[core.scala 319:37]
    EX_MEM_M.io.fun3in <= ID_EX_.io.func3_out @[core.scala 320:23]
    DataMemory.io.mem_read <= EX_MEM_M.io.EXMEM_memRd_out @[core.scala 323:37]
    DataMemory.io.mem_write <= EX_MEM_M.io.EXMEM_memWr_out @[core.scala 324:37]
    DataMemory.io.dataIn <= EX_MEM_M.io.EXMEM_rs2_out @[core.scala 325:37]
    node _DataMemory_io_addr_T = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[core.scala 326:66]
    DataMemory.io.addr <= _DataMemory_io_addr_T @[core.scala 326:37]
    DataMemory.io.fun3 <= EX_MEM_M.io.fun3out @[core.scala 327:24]
    MEM_WB_M.io.EXMEM_MEMTOREG <= EX_MEM_M.io.EXMEM_memToReg_out @[core.scala 329:37]
    MEM_WB_M.io.EXMEM_REG_W <= EX_MEM_M.io.EXMEM_reg_w_out @[core.scala 330:37]
    MEM_WB_M.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[core.scala 331:37]
    MEM_WB_M.io.in_dataMem_out <= DataMemory.io.dataOut @[core.scala 332:37]
    MEM_WB_M.io.in_alu_out <= EX_MEM_M.io.EXMEM_alu_out @[core.scala 333:37]
    RegFile.io.w_reg <= MEM_WB_M.io.MEMWB_rd_out @[core.scala 336:37]
    RegFile.io.reg_write <= MEM_WB_M.io.MEMWB_reg_w_out @[core.scala 337:37]
    node _T_45 = eq(MEM_WB_M.io.MEMWB_memToReg_out, UInt<1>("h00")) @[core.scala 340:42]
    when _T_45 : @[core.scala 340:51]
      d <= MEM_WB_M.io.MEMWB_alu_out @[core.scala 341:9]
      skip @[core.scala 340:51]
    else : @[core.scala 342:57]
      node _T_46 = eq(MEM_WB_M.io.MEMWB_memToReg_out, UInt<1>("h01")) @[core.scala 342:48]
      when _T_46 : @[core.scala 342:57]
        d <= MEM_WB_M.io.MEMWB_dataMem_out @[core.scala 343:9]
        skip @[core.scala 342:57]
      else : @[core.scala 344:17]
        d <= asSInt(UInt<1>("h00")) @[core.scala 345:9]
        skip @[core.scala 344:17]
    RegFile.io.w_data <= d @[core.scala 347:23]
    io.out <= asSInt(UInt<1>("h00")) @[core.scala 349:12]
    
