;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TopModule : 
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem ime : UInt<32>[1024] @[InsMem.scala 13:15]
    node _io_inst_T = div(io.addr, UInt<3>("h04")) @[InsMem.scala 15:27]
    node _io_inst_T_1 = bits(_io_inst_T, 9, 0) @[InsMem.scala 15:15]
    infer mport io_inst_MPORT = ime[_io_inst_T_1], clock @[InsMem.scala 15:15]
    io.inst <= io_inst_MPORT @[InsMem.scala 15:9]
    
  module fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip pcsel : UInt<1>, flip aluout : SInt<32>, instruction : UInt<32>, pc_out : UInt<32>, pc4_out : UInt<32>}
    
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Fetch.scala 14:20]
    inst insMem of InstMem @[Fetch.scala 15:24]
    insMem.clock <= clock
    insMem.reset <= reset
    io.pc_out <= pc @[Fetch.scala 16:14]
    insMem.io.addr <= pc @[Fetch.scala 17:19]
    node _pc_T = asUInt(io.aluout) @[Fetch.scala 18:38]
    node _pc_T_1 = add(pc, UInt<3>("h04")) @[Fetch.scala 18:44]
    node _pc_T_2 = tail(_pc_T_1, 1) @[Fetch.scala 18:44]
    node _pc_T_3 = mux(io.pcsel, _pc_T, _pc_T_2) @[Fetch.scala 18:12]
    pc <= _pc_T_3 @[Fetch.scala 18:7]
    node _io_pc4_out_T = add(pc, UInt<3>("h04")) @[Fetch.scala 19:21]
    node _io_pc4_out_T_1 = tail(_io_pc4_out_T, 1) @[Fetch.scala 19:21]
    io.pc4_out <= _io_pc4_out_T_1 @[Fetch.scala 19:15]
    io.instruction <= insMem.io.inst @[Fetch.scala 21:19]
    
  module contolUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, aluop : UInt<4>, iform : UInt<1>, rform : UInt<1>, sform : UInt<1>, bform : UInt<1>, luiform : UInt<1>, Jalform : UInt<1>, jalrform : UInt<1>, lform : UInt<1>, Auipc : UInt<1>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, wr_en : UInt<1>, mem_wr_en : UInt<1>, wr_back : UInt<2>, immBits : UInt<12>, br_fun3 : UInt<3>, load_storefun : UInt<3>, pcsel : UInt<1>, flip btaken : UInt<1>, lui_jal_jalr_auipc_imm : SInt<32>, mem_r_en : UInt<1>, opAsel : UInt<2>, opBsel : UInt<1>}
    
    io.rs1 <= UInt<1>("h00") @[control.scala 37:12]
    io.rs2 <= UInt<1>("h00") @[control.scala 38:12]
    io.mem_wr_en <= UInt<1>("h00") @[control.scala 39:17]
    io.wr_en <= UInt<1>("h00") @[control.scala 40:13]
    io.wr_back <= UInt<1>("h00") @[control.scala 41:15]
    io.load_storefun <= UInt<1>("h00") @[control.scala 42:21]
    io.immBits <= UInt<1>("h00") @[control.scala 43:16]
    io.aluop <= UInt<1>("h00") @[control.scala 44:14]
    io.bform <= UInt<1>("h00") @[control.scala 45:14]
    io.pcsel <= UInt<1>("h00") @[control.scala 46:13]
    io.lui_jal_jalr_auipc_imm <= asSInt(UInt<1>("h00")) @[control.scala 47:30]
    io.br_fun3 <= UInt<1>("h00") @[control.scala 48:15]
    io.lform <= UInt<1>("h00") @[control.scala 49:13]
    io.mem_r_en <= UInt<1>("h00") @[control.scala 50:16]
    io.opAsel <= UInt<1>("h00") @[control.scala 51:15]
    io.opBsel <= UInt<1>("h00") @[control.scala 52:15]
    node _op_T = bits(io.instruction, 6, 0) @[control.scala 56:36]
    wire op : UInt
    op <= _op_T
    node _f3_T = bits(io.instruction, 14, 12) @[control.scala 57:38]
    wire f3 : UInt
    f3 <= _f3_T
    node _f7_T = bits(io.instruction, 31, 25) @[control.scala 58:38]
    wire f7 : UInt
    f7 <= _f7_T
    node _Rd_T = bits(io.instruction, 11, 7) @[control.scala 59:38]
    wire Rd : UInt
    Rd <= _Rd_T
    node _Rs1_T = bits(io.instruction, 19, 15) @[control.scala 60:39]
    wire Rs1 : UInt
    Rs1 <= _Rs1_T
    node _Rs2_T = bits(io.instruction, 24, 20) @[control.scala 61:39]
    wire Rs2 : UInt
    Rs2 <= _Rs2_T
    node _imm_T = bits(io.instruction, 31, 20) @[control.scala 62:39]
    wire imm : UInt
    imm <= _imm_T
    io.rform <= UInt<1>("h00") @[control.scala 63:14]
    io.iform <= UInt<1>("h00") @[control.scala 64:14]
    io.sform <= UInt<1>("h00") @[control.scala 65:14]
    io.luiform <= UInt<1>("h00") @[control.scala 66:16]
    io.Jalform <= UInt<1>("h00") @[control.scala 67:16]
    io.jalrform <= UInt<1>("h00") @[control.scala 68:17]
    io.Auipc <= UInt<1>("h00") @[control.scala 69:14]
    node _T = eq(op, UInt<6>("h033")) @[control.scala 70:13]
    when _T : @[control.scala 70:29]
      io.rform <= UInt<1>("h01") @[control.scala 71:15]
      node fn3_7_lo = bits(f7, 5, 5) @[control.scala 72:28]
      node fn3_7 = cat(f3, fn3_7_lo) @[Cat.scala 30:58]
      io.aluop <= fn3_7 @[control.scala 73:15]
      io.rs2 <= Rs2 @[control.scala 74:13]
      io.wr_en <= UInt<1>("h01") @[control.scala 75:15]
      io.rd <= Rd @[control.scala 76:12]
      io.rs1 <= Rs1 @[control.scala 77:13]
      io.mem_wr_en <= UInt<1>("h00") @[control.scala 78:19]
      io.wr_back <= UInt<1>("h01") @[control.scala 79:17]
      io.br_fun3 <= UInt<1>("h00") @[control.scala 80:17]
      io.pcsel <= UInt<1>("h00") @[control.scala 81:15]
      io.opAsel <= UInt<1>("h00") @[control.scala 82:18]
      io.opBsel <= UInt<1>("h00") @[control.scala 83:18]
      skip @[control.scala 70:29]
    else : @[control.scala 86:34]
      node _T_1 = eq(op, UInt<5>("h013")) @[control.scala 86:18]
      when _T_1 : @[control.scala 86:34]
        io.iform <= UInt<1>("h01") @[control.scala 87:17]
        node _T_2 = eq(f3, UInt<3>("h05")) @[control.scala 88:16]
        node _T_3 = eq(f3, UInt<1>("h01")) @[control.scala 88:26]
        node _T_4 = or(_T_2, _T_3) @[control.scala 88:22]
        when _T_4 : @[control.scala 88:33]
          node io_aluop_lo = bits(f7, 5, 5) @[control.scala 89:30]
          node _io_aluop_T = cat(f3, io_aluop_lo) @[Cat.scala 30:58]
          io.aluop <= _io_aluop_T @[control.scala 89:19]
          skip @[control.scala 88:33]
        else : @[control.scala 91:19]
          node _io_aluop_T_1 = cat(f3, UInt<1>("h00")) @[Cat.scala 30:58]
          io.aluop <= _io_aluop_T_1 @[control.scala 92:17]
          skip @[control.scala 91:19]
        io.wr_en <= UInt<1>("h01") @[control.scala 94:17]
        io.rd <= Rd @[control.scala 95:15]
        io.rs1 <= Rs1 @[control.scala 96:16]
        io.mem_wr_en <= UInt<1>("h00") @[control.scala 97:22]
        io.wr_back <= UInt<1>("h01") @[control.scala 98:20]
        io.rs2 <= UInt<1>("h00") @[control.scala 99:16]
        node _io_immBits_T = bits(io.instruction, 31, 20) @[control.scala 101:36]
        io.immBits <= _io_immBits_T @[control.scala 101:20]
        io.br_fun3 <= UInt<1>("h00") @[control.scala 102:20]
        io.pcsel <= UInt<1>("h00") @[control.scala 103:18]
        io.opAsel <= UInt<1>("h00") @[control.scala 104:21]
        io.opBsel <= UInt<1>("h01") @[control.scala 105:21]
        skip @[control.scala 86:34]
      else : @[control.scala 108:34]
        node _T_5 = eq(op, UInt<2>("h03")) @[control.scala 108:18]
        when _T_5 : @[control.scala 108:34]
          io.iform <= UInt<1>("h01") @[control.scala 109:17]
          io.rd <= Rd @[control.scala 110:14]
          io.lform <= UInt<1>("h01") @[control.scala 111:17]
          io.rs1 <= Rs1 @[control.scala 112:15]
          io.aluop <= UInt<1>("h00") @[control.scala 113:17]
          io.mem_wr_en <= UInt<1>("h00") @[control.scala 114:21]
          io.wr_back <= UInt<1>("h00") @[control.scala 115:19]
          io.rs2 <= UInt<1>("h00") @[control.scala 116:15]
          node _io_immBits_T_1 = bits(io.instruction, 31, 20) @[control.scala 118:35]
          io.immBits <= _io_immBits_T_1 @[control.scala 118:19]
          io.load_storefun <= f3 @[control.scala 119:25]
          io.pcsel <= UInt<1>("h00") @[control.scala 120:17]
          io.mem_r_en <= UInt<1>("h01") @[control.scala 121:20]
          io.wr_en <= UInt<1>("h01") @[control.scala 122:18]
          io.opAsel <= UInt<1>("h00") @[control.scala 123:20]
          io.opBsel <= UInt<1>("h01") @[control.scala 124:20]
          skip @[control.scala 108:34]
        else : @[control.scala 128:34]
          node _T_6 = eq(op, UInt<6>("h023")) @[control.scala 128:18]
          when _T_6 : @[control.scala 128:34]
            io.wr_en <= UInt<1>("h00") @[control.scala 129:15]
            io.sform <= UInt<1>("h01") @[control.scala 130:15]
            io.rs1 <= Rs1 @[control.scala 131:13]
            io.rs2 <= Rs2 @[control.scala 132:13]
            node io_immBits_hi = bits(io.instruction, 31, 25) @[control.scala 135:37]
            node io_immBits_lo = bits(io.instruction, 11, 7) @[control.scala 135:59]
            node _io_immBits_T_2 = cat(io_immBits_hi, io_immBits_lo) @[Cat.scala 30:58]
            io.immBits <= _io_immBits_T_2 @[control.scala 135:17]
            io.aluop <= UInt<1>("h00") @[control.scala 136:15]
            io.rd <= UInt<1>("h00") @[control.scala 137:12]
            io.mem_wr_en <= UInt<1>("h01") @[control.scala 138:19]
            io.load_storefun <= f3 @[control.scala 139:23]
            io.pcsel <= UInt<1>("h00") @[control.scala 140:15]
            io.opAsel <= UInt<1>("h00") @[control.scala 141:18]
            io.opBsel <= UInt<1>("h01") @[control.scala 142:18]
            skip @[control.scala 128:34]
          else : @[control.scala 146:34]
            node _T_7 = eq(op, UInt<7>("h063")) @[control.scala 146:18]
            when _T_7 : @[control.scala 146:34]
              io.wr_en <= UInt<1>("h00") @[control.scala 147:15]
              io.bform <= UInt<1>("h01") @[control.scala 148:15]
              io.rs1 <= Rs1 @[control.scala 149:13]
              io.rs2 <= Rs2 @[control.scala 150:13]
              io.aluop <= UInt<1>("h00") @[control.scala 151:15]
              io.rd <= UInt<1>("h00") @[control.scala 152:12]
              io.mem_wr_en <= UInt<1>("h00") @[control.scala 153:19]
              node _io_lui_jal_jalr_auipc_imm_T = bits(io.instruction, 31, 31) @[control.scala 154:62]
              node _io_lui_jal_jalr_auipc_imm_T_1 = bits(_io_lui_jal_jalr_auipc_imm_T, 0, 0) @[Bitwise.scala 72:15]
              node io_lui_jal_jalr_auipc_imm_hi_hi_hi = mux(_io_lui_jal_jalr_auipc_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node io_lui_jal_jalr_auipc_imm_hi_hi_lo = bits(io.instruction, 31, 31) @[control.scala 154:82]
              node io_lui_jal_jalr_auipc_imm_hi_lo = bits(io.instruction, 7, 7) @[control.scala 154:101]
              node io_lui_jal_jalr_auipc_imm_lo_hi_hi = bits(io.instruction, 30, 25) @[control.scala 154:119]
              node io_lui_jal_jalr_auipc_imm_lo_hi_lo = bits(io.instruction, 11, 8) @[control.scala 154:141]
              node io_lui_jal_jalr_auipc_imm_lo_hi = cat(io_lui_jal_jalr_auipc_imm_lo_hi_hi, io_lui_jal_jalr_auipc_imm_lo_hi_lo) @[Cat.scala 30:58]
              node io_lui_jal_jalr_auipc_imm_lo = cat(io_lui_jal_jalr_auipc_imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_lui_jal_jalr_auipc_imm_hi_hi = cat(io_lui_jal_jalr_auipc_imm_hi_hi_hi, io_lui_jal_jalr_auipc_imm_hi_hi_lo) @[Cat.scala 30:58]
              node io_lui_jal_jalr_auipc_imm_hi = cat(io_lui_jal_jalr_auipc_imm_hi_hi, io_lui_jal_jalr_auipc_imm_hi_lo) @[Cat.scala 30:58]
              node _io_lui_jal_jalr_auipc_imm_T_2 = cat(io_lui_jal_jalr_auipc_imm_hi, io_lui_jal_jalr_auipc_imm_lo) @[Cat.scala 30:58]
              node _io_lui_jal_jalr_auipc_imm_T_3 = asSInt(_io_lui_jal_jalr_auipc_imm_T_2) @[control.scala 154:161]
              io.lui_jal_jalr_auipc_imm <= _io_lui_jal_jalr_auipc_imm_T_3 @[control.scala 154:32]
              io.wr_back <= UInt<1>("h00") @[control.scala 155:17]
              node _io_br_fun3_T = bits(io.instruction, 14, 12) @[control.scala 156:33]
              io.br_fun3 <= _io_br_fun3_T @[control.scala 156:17]
              node _io_pcsel_T = and(io.btaken, io.bform) @[control.scala 157:31]
              node _io_pcsel_T_1 = mux(_io_pcsel_T, UInt<1>("h01"), UInt<1>("h00")) @[control.scala 157:20]
              io.pcsel <= _io_pcsel_T_1 @[control.scala 157:15]
              io.opAsel <= UInt<1>("h00") @[control.scala 158:18]
              io.opBsel <= UInt<1>("h00") @[control.scala 159:18]
              skip @[control.scala 146:34]
            else : @[control.scala 163:34]
              node _T_8 = eq(op, UInt<6>("h037")) @[control.scala 163:18]
              when _T_8 : @[control.scala 163:34]
                io.luiform <= UInt<1>("h01") @[control.scala 164:17]
                io.rd <= Rd @[control.scala 165:12]
                node io_lui_jal_jalr_auipc_imm_hi_hi_1 = bits(io.instruction, 31, 12) @[control.scala 166:52]
                node io_lui_jal_jalr_auipc_imm_hi_lo_1 = mux(UInt<1>("h00"), UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                node io_lui_jal_jalr_auipc_imm_hi_1 = cat(io_lui_jal_jalr_auipc_imm_hi_hi_1, io_lui_jal_jalr_auipc_imm_hi_lo_1) @[Cat.scala 30:58]
                node _io_lui_jal_jalr_auipc_imm_T_4 = cat(io_lui_jal_jalr_auipc_imm_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                node _io_lui_jal_jalr_auipc_imm_T_5 = asSInt(_io_lui_jal_jalr_auipc_imm_T_4) @[control.scala 166:86]
                io.lui_jal_jalr_auipc_imm <= _io_lui_jal_jalr_auipc_imm_T_5 @[control.scala 166:32]
                io.br_fun3 <= UInt<1>("h00") @[control.scala 167:17]
                io.mem_wr_en <= UInt<1>("h00") @[control.scala 168:19]
                io.wr_en <= UInt<1>("h01") @[control.scala 169:15]
                io.wr_back <= UInt<1>("h01") @[control.scala 170:17]
                io.rs1 <= UInt<1>("h00") @[control.scala 171:13]
                io.rs2 <= UInt<1>("h00") @[control.scala 172:13]
                io.aluop <= UInt<1>("h00") @[control.scala 173:15]
                io.immBits <= UInt<1>("h00") @[control.scala 174:17]
                io.pcsel <= UInt<1>("h00") @[control.scala 175:15]
                io.opAsel <= UInt<2>("h02") @[control.scala 176:18]
                io.opBsel <= UInt<1>("h01") @[control.scala 177:18]
                skip @[control.scala 163:34]
              else : @[control.scala 180:34]
                node _T_9 = eq(op, UInt<7>("h06f")) @[control.scala 180:18]
                when _T_9 : @[control.scala 180:34]
                  io.rd <= Rd @[control.scala 181:12]
                  node _io_lui_jal_jalr_auipc_imm_T_6 = bits(io.instruction, 31, 31) @[control.scala 182:60]
                  node _io_lui_jal_jalr_auipc_imm_T_7 = bits(_io_lui_jal_jalr_auipc_imm_T_6, 0, 0) @[Bitwise.scala 72:15]
                  node io_lui_jal_jalr_auipc_imm_hi_hi_hi_1 = mux(_io_lui_jal_jalr_auipc_imm_T_7, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  node io_lui_jal_jalr_auipc_imm_hi_hi_lo_1 = bits(io.instruction, 31, 31) @[control.scala 182:80]
                  node io_lui_jal_jalr_auipc_imm_hi_lo_2 = bits(io.instruction, 19, 12) @[control.scala 182:99]
                  node io_lui_jal_jalr_auipc_imm_lo_hi_hi_1 = bits(io.instruction, 20, 20) @[control.scala 182:121]
                  node io_lui_jal_jalr_auipc_imm_lo_hi_lo_1 = bits(io.instruction, 30, 21) @[control.scala 182:140]
                  node io_lui_jal_jalr_auipc_imm_lo_hi_1 = cat(io_lui_jal_jalr_auipc_imm_lo_hi_hi_1, io_lui_jal_jalr_auipc_imm_lo_hi_lo_1) @[Cat.scala 30:58]
                  node io_lui_jal_jalr_auipc_imm_lo_1 = cat(io_lui_jal_jalr_auipc_imm_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                  node io_lui_jal_jalr_auipc_imm_hi_hi_2 = cat(io_lui_jal_jalr_auipc_imm_hi_hi_hi_1, io_lui_jal_jalr_auipc_imm_hi_hi_lo_1) @[Cat.scala 30:58]
                  node io_lui_jal_jalr_auipc_imm_hi_2 = cat(io_lui_jal_jalr_auipc_imm_hi_hi_2, io_lui_jal_jalr_auipc_imm_hi_lo_2) @[Cat.scala 30:58]
                  node _io_lui_jal_jalr_auipc_imm_T_8 = cat(io_lui_jal_jalr_auipc_imm_hi_2, io_lui_jal_jalr_auipc_imm_lo_1) @[Cat.scala 30:58]
                  node _io_lui_jal_jalr_auipc_imm_T_9 = asSInt(_io_lui_jal_jalr_auipc_imm_T_8) @[control.scala 182:159]
                  io.lui_jal_jalr_auipc_imm <= _io_lui_jal_jalr_auipc_imm_T_9 @[control.scala 182:32]
                  io.Jalform <= UInt<1>("h01") @[control.scala 183:17]
                  io.aluop <= UInt<1>("h00") @[control.scala 184:15]
                  io.rs1 <= UInt<1>("h00") @[control.scala 185:13]
                  io.rs2 <= UInt<1>("h00") @[control.scala 186:13]
                  io.mem_wr_en <= UInt<1>("h00") @[control.scala 187:19]
                  io.wr_en <= UInt<1>("h01") @[control.scala 188:15]
                  io.pcsel <= UInt<1>("h01") @[control.scala 189:15]
                  io.wr_back <= UInt<2>("h02") @[control.scala 190:17]
                  io.opAsel <= UInt<1>("h01") @[control.scala 191:18]
                  io.opBsel <= UInt<1>("h00") @[control.scala 192:18]
                  skip @[control.scala 180:34]
                else : @[control.scala 197:34]
                  node _T_10 = eq(op, UInt<7>("h067")) @[control.scala 197:18]
                  when _T_10 : @[control.scala 197:34]
                    node _io_lui_jal_jalr_auipc_imm_T_10 = bits(io.instruction, 31, 31) @[control.scala 198:60]
                    node _io_lui_jal_jalr_auipc_imm_T_11 = bits(_io_lui_jal_jalr_auipc_imm_T_10, 0, 0) @[Bitwise.scala 72:15]
                    node io_lui_jal_jalr_auipc_imm_hi_3 = mux(_io_lui_jal_jalr_auipc_imm_T_11, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                    node io_lui_jal_jalr_auipc_imm_lo_2 = bits(io.instruction, 31, 20) @[control.scala 198:80]
                    node _io_lui_jal_jalr_auipc_imm_T_12 = cat(io_lui_jal_jalr_auipc_imm_hi_3, io_lui_jal_jalr_auipc_imm_lo_2) @[Cat.scala 30:58]
                    node _io_lui_jal_jalr_auipc_imm_T_13 = asSInt(_io_lui_jal_jalr_auipc_imm_T_12) @[control.scala 198:95]
                    io.lui_jal_jalr_auipc_imm <= _io_lui_jal_jalr_auipc_imm_T_13 @[control.scala 198:32]
                    io.rs1 <= Rs1 @[control.scala 199:13]
                    io.rs2 <= UInt<1>("h00") @[control.scala 200:13]
                    io.rd <= Rd @[control.scala 201:12]
                    io.mem_wr_en <= UInt<1>("h00") @[control.scala 202:19]
                    io.wr_back <= UInt<2>("h02") @[control.scala 203:17]
                    io.wr_en <= UInt<1>("h01") @[control.scala 204:15]
                    io.pcsel <= UInt<1>("h01") @[control.scala 205:15]
                    io.Jalform <= UInt<1>("h00") @[control.scala 206:17]
                    io.jalrform <= UInt<1>("h01") @[control.scala 207:18]
                    io.aluop <= UInt<1>("h00") @[control.scala 208:15]
                    io.opAsel <= UInt<1>("h01") @[control.scala 209:18]
                    io.opBsel <= UInt<1>("h01") @[control.scala 210:18]
                    skip @[control.scala 197:34]
                  else : @[control.scala 213:34]
                    node _T_11 = eq(op, UInt<5>("h017")) @[control.scala 213:18]
                    when _T_11 : @[control.scala 213:34]
                      io.rs1 <= UInt<1>("h00") @[control.scala 214:13]
                      io.rs2 <= UInt<1>("h00") @[control.scala 215:13]
                      io.rd <= UInt<1>("h00") @[control.scala 216:12]
                      io.wr_back <= UInt<1>("h00") @[control.scala 217:17]
                      io.mem_wr_en <= UInt<1>("h00") @[control.scala 218:19]
                      io.wr_en <= UInt<1>("h00") @[control.scala 219:15]
                      io.aluop <= UInt<1>("h00") @[control.scala 220:15]
                      io.pcsel <= UInt<1>("h01") @[control.scala 221:15]
                      io.Auipc <= UInt<1>("h01") @[control.scala 222:15]
                      node io_lui_jal_jalr_auipc_imm_hi_hi_3 = bits(io.instruction, 31, 12) @[control.scala 223:52]
                      node io_lui_jal_jalr_auipc_imm_hi_lo_3 = mux(UInt<1>("h00"), UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                      node io_lui_jal_jalr_auipc_imm_hi_4 = cat(io_lui_jal_jalr_auipc_imm_hi_hi_3, io_lui_jal_jalr_auipc_imm_hi_lo_3) @[Cat.scala 30:58]
                      node _io_lui_jal_jalr_auipc_imm_T_14 = cat(io_lui_jal_jalr_auipc_imm_hi_4, UInt<1>("h00")) @[Cat.scala 30:58]
                      node _io_lui_jal_jalr_auipc_imm_T_15 = asSInt(_io_lui_jal_jalr_auipc_imm_T_14) @[control.scala 223:86]
                      io.lui_jal_jalr_auipc_imm <= _io_lui_jal_jalr_auipc_imm_T_15 @[control.scala 223:32]
                      skip @[control.scala 213:34]
                    else : @[control.scala 228:16]
                      io.rform <= UInt<1>("h00") @[control.scala 229:15]
                      io.iform <= UInt<1>("h00") @[control.scala 230:15]
                      io.sform <= UInt<1>("h00") @[control.scala 231:15]
                      io.bform <= UInt<1>("h00") @[control.scala 232:15]
                      io.wr_back <= UInt<1>("h00") @[control.scala 233:17]
                      io.wr_en <= UInt<1>("h00") @[control.scala 234:15]
                      io.mem_wr_en <= UInt<1>("h00") @[control.scala 235:19]
                      io.rs1 <= UInt<1>("h00") @[control.scala 236:13]
                      io.rs2 <= UInt<1>("h00") @[control.scala 237:13]
                      io.rd <= UInt<1>("h00") @[control.scala 238:12]
                      io.br_fun3 <= UInt<1>("h00") @[control.scala 239:17]
                      skip @[control.scala 228:16]
    
  module Reg_File : 
    input clock : Clock
    input reset : Reset
    output io : {flip rd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, Rs1 : SInt<32>, Rs2 : SInt<32>, flip wr : UInt<1>, flip Rd : SInt<32>}
    
    reg Reg2 : SInt<32>[32], clock @[RegFile.scala 19:16]
    io.Rs1 <= asSInt(UInt<1>("h00")) @[RegFile.scala 20:8]
    io.Rs2 <= asSInt(UInt<1>("h00")) @[RegFile.scala 21:8]
    Reg2[0] <= asSInt(UInt<1>("h00")) @[RegFile.scala 23:9]
    node _T = neq(io.rd, UInt<1>("h00")) @[RegFile.scala 26:20]
    node _T_1 = and(io.wr, _T) @[RegFile.scala 26:12]
    when _T_1 : @[RegFile.scala 26:27]
      node _T_2 = eq(io.rd, io.rs1) @[RegFile.scala 27:15]
      node _T_3 = eq(io.rd, io.rs2) @[RegFile.scala 27:34]
      node _T_4 = or(_T_2, _T_3) @[RegFile.scala 27:25]
      when _T_4 : @[RegFile.scala 27:45]
        Reg2[io.rd] <= io.Rd @[RegFile.scala 28:20]
        io.Rs1 <= io.Rd @[RegFile.scala 29:16]
        io.Rs2 <= io.Rd @[RegFile.scala 30:16]
        skip @[RegFile.scala 27:45]
      else : @[RegFile.scala 32:15]
        Reg2[io.rd] <= io.Rd @[RegFile.scala 33:20]
        io.Rs1 <= Reg2[io.rs1] @[RegFile.scala 34:16]
        io.Rs2 <= Reg2[io.rs2] @[RegFile.scala 35:16]
        skip @[RegFile.scala 32:15]
      skip @[RegFile.scala 26:27]
    else : @[RegFile.scala 39:11]
      io.Rs1 <= Reg2[io.rs1] @[RegFile.scala 40:12]
      io.Rs2 <= Reg2[io.rs2] @[RegFile.scala 41:12]
      skip @[RegFile.scala 39:11]
    
  module ImmdValGen1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip imm : UInt<12>, immd_se : UInt<32>}
    
    node _io_immd_se_T = bits(io.imm, 11, 11) @[IMM.scala 16:33]
    node _io_immd_se_T_1 = bits(_io_immd_se_T, 0, 0) @[Bitwise.scala 72:15]
    node io_immd_se_hi = mux(_io_immd_se_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_immd_se_T_2 = cat(io_immd_se_hi, io.imm) @[Cat.scala 30:58]
    io.immd_se <= _io_immd_se_T_2 @[IMM.scala 16:12]
    
  module decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, imm_out : UInt<32>, iform : UInt<1>, rform : UInt<1>, sform : UInt<1>, bform : UInt<1>, luiform : UInt<1>, Jalform : UInt<1>, jalrform : UInt<1>, lform : UInt<1>, Auipc : UInt<1>, lui_jal_jalr_auipc_imm : SInt<32>, immBits : UInt<12>, mem_wr_en : UInt<1>, wr_back : UInt<2>, br_fun3 : UInt<3>, load_storefun : UInt<3>, pcsel : UInt<1>, flip btaken : UInt<1>, mem_r_en : UInt<1>, rs1 : SInt<32>, rs2 : SInt<32>, flip din : SInt<32>, aluop : UInt<4>, flip pcout : UInt<32>, flip pc4out : UInt<32>, pc_4out : UInt<32>, pc_out : UInt<32>, RS1 : UInt<5>, RS2 : UInt<5>, Rd : UInt<5>, RegWr_en : UInt<1>, flip Wrbrd : UInt<5>, flip RegWr_enWB : UInt<1>, flip wrbform : UInt<1>, opAsel : UInt<2>, opBsel : UInt<1>}
    
    inst cu of contolUnit @[Decode.scala 49:21]
    cu.clock <= clock
    cu.reset <= reset
    inst regFile of Reg_File @[Decode.scala 50:25]
    regFile.clock <= clock
    regFile.reset <= reset
    inst imm of ImmdValGen1 @[Decode.scala 51:21]
    imm.clock <= clock
    imm.reset <= reset
    cu.io.instruction <= io.ins @[Decode.scala 53:22]
    io.RS1 <= cu.io.rs1 @[Decode.scala 55:11]
    io.RS2 <= cu.io.rs2 @[Decode.scala 56:11]
    io.Rd <= cu.io.rd @[Decode.scala 57:10]
    io.RegWr_en <= cu.io.wr_en @[Decode.scala 58:16]
    io.wr_back <= cu.io.wr_back @[Decode.scala 60:15]
    cu.io.btaken <= io.btaken @[Decode.scala 64:17]
    io.immBits <= cu.io.immBits @[Decode.scala 67:15]
    imm.io.imm <= io.immBits @[Decode.scala 68:15]
    io.imm_out <= imm.io.immd_se @[Decode.scala 69:15]
    io.lui_jal_jalr_auipc_imm <= cu.io.lui_jal_jalr_auipc_imm @[Decode.scala 70:30]
    io.iform <= cu.io.iform @[Decode.scala 72:13]
    io.rform <= cu.io.rform @[Decode.scala 73:13]
    io.bform <= cu.io.bform @[Decode.scala 74:13]
    io.sform <= cu.io.sform @[Decode.scala 75:13]
    io.luiform <= cu.io.luiform @[Decode.scala 76:15]
    io.Jalform <= cu.io.Jalform @[Decode.scala 77:15]
    io.jalrform <= cu.io.jalrform @[Decode.scala 78:16]
    io.lform <= cu.io.lform @[Decode.scala 79:13]
    io.Auipc <= cu.io.Auipc @[Decode.scala 80:13]
    io.mem_wr_en <= cu.io.mem_wr_en @[Decode.scala 82:17]
    io.wr_back <= cu.io.wr_back @[Decode.scala 83:15]
    io.br_fun3 <= cu.io.br_fun3 @[Decode.scala 84:15]
    io.load_storefun <= cu.io.load_storefun @[Decode.scala 85:21]
    io.pcsel <= cu.io.pcsel @[Decode.scala 86:13]
    io.mem_r_en <= cu.io.mem_r_en @[Decode.scala 88:16]
    io.aluop <= cu.io.aluop @[Decode.scala 89:13]
    regFile.io.rd <= io.Wrbrd @[Decode.scala 91:18]
    regFile.io.rs1 <= cu.io.rs1 @[Decode.scala 92:19]
    regFile.io.rs2 <= cu.io.rs2 @[Decode.scala 93:19]
    regFile.io.wr <= io.RegWr_enWB @[Decode.scala 94:18]
    regFile.io.Rd <= io.din @[Decode.scala 95:18]
    io.rs1 <= regFile.io.Rs1 @[Decode.scala 97:11]
    io.rs2 <= regFile.io.Rs2 @[Decode.scala 98:11]
    io.pc_out <= io.pcout @[Decode.scala 100:14]
    io.pc_4out <= io.pc4out @[Decode.scala 101:15]
    io.opAsel <= cu.io.opAsel @[Decode.scala 103:14]
    io.opBsel <= cu.io.opBsel @[Decode.scala 104:14]
    
  module ALUS : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_op : UInt<4>, out : SInt<32>}
    
    node _sum_T = bits(io.alu_op, 0, 0) @[ALU.scala 31:41]
    node _sum_T_1 = sub(asSInt(UInt<1>("h00")), io.in_B) @[ALU.scala 31:48]
    node _sum_T_2 = tail(_sum_T_1, 1) @[ALU.scala 31:48]
    node _sum_T_3 = asSInt(_sum_T_2) @[ALU.scala 31:48]
    node _sum_T_4 = mux(_sum_T, _sum_T_3, io.in_B) @[ALU.scala 31:30]
    node _sum_T_5 = add(io.in_A, _sum_T_4) @[ALU.scala 31:25]
    node _sum_T_6 = tail(_sum_T_5, 1) @[ALU.scala 31:25]
    node sum = asSInt(_sum_T_6) @[ALU.scala 31:25]
    node shamt = bits(io.in_B, 4, 0) @[ALU.scala 32:27]
    node _shin_T = bits(io.alu_op, 3, 3) @[ALU.scala 33:29]
    node _shin_T_1 = asUInt(io.in_A) @[ALU.scala 33:42]
    node _shin_T_2 = asUInt(io.in_A) @[ALU.scala 33:73]
    node _shin_T_3 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shin_T_4 = xor(UInt<32>("h0ffffffff"), _shin_T_3) @[Bitwise.scala 102:21]
    node _shin_T_5 = shr(_shin_T_2, 16) @[Bitwise.scala 103:21]
    node _shin_T_6 = and(_shin_T_5, _shin_T_4) @[Bitwise.scala 103:31]
    node _shin_T_7 = bits(_shin_T_2, 15, 0) @[Bitwise.scala 103:46]
    node _shin_T_8 = shl(_shin_T_7, 16) @[Bitwise.scala 103:65]
    node _shin_T_9 = not(_shin_T_4) @[Bitwise.scala 103:77]
    node _shin_T_10 = and(_shin_T_8, _shin_T_9) @[Bitwise.scala 103:75]
    node _shin_T_11 = or(_shin_T_6, _shin_T_10) @[Bitwise.scala 103:39]
    node _shin_T_12 = bits(_shin_T_4, 23, 0) @[Bitwise.scala 102:28]
    node _shin_T_13 = shl(_shin_T_12, 8) @[Bitwise.scala 102:47]
    node _shin_T_14 = xor(_shin_T_4, _shin_T_13) @[Bitwise.scala 102:21]
    node _shin_T_15 = shr(_shin_T_11, 8) @[Bitwise.scala 103:21]
    node _shin_T_16 = and(_shin_T_15, _shin_T_14) @[Bitwise.scala 103:31]
    node _shin_T_17 = bits(_shin_T_11, 23, 0) @[Bitwise.scala 103:46]
    node _shin_T_18 = shl(_shin_T_17, 8) @[Bitwise.scala 103:65]
    node _shin_T_19 = not(_shin_T_14) @[Bitwise.scala 103:77]
    node _shin_T_20 = and(_shin_T_18, _shin_T_19) @[Bitwise.scala 103:75]
    node _shin_T_21 = or(_shin_T_16, _shin_T_20) @[Bitwise.scala 103:39]
    node _shin_T_22 = bits(_shin_T_14, 27, 0) @[Bitwise.scala 102:28]
    node _shin_T_23 = shl(_shin_T_22, 4) @[Bitwise.scala 102:47]
    node _shin_T_24 = xor(_shin_T_14, _shin_T_23) @[Bitwise.scala 102:21]
    node _shin_T_25 = shr(_shin_T_21, 4) @[Bitwise.scala 103:21]
    node _shin_T_26 = and(_shin_T_25, _shin_T_24) @[Bitwise.scala 103:31]
    node _shin_T_27 = bits(_shin_T_21, 27, 0) @[Bitwise.scala 103:46]
    node _shin_T_28 = shl(_shin_T_27, 4) @[Bitwise.scala 103:65]
    node _shin_T_29 = not(_shin_T_24) @[Bitwise.scala 103:77]
    node _shin_T_30 = and(_shin_T_28, _shin_T_29) @[Bitwise.scala 103:75]
    node _shin_T_31 = or(_shin_T_26, _shin_T_30) @[Bitwise.scala 103:39]
    node _shin_T_32 = bits(_shin_T_24, 29, 0) @[Bitwise.scala 102:28]
    node _shin_T_33 = shl(_shin_T_32, 2) @[Bitwise.scala 102:47]
    node _shin_T_34 = xor(_shin_T_24, _shin_T_33) @[Bitwise.scala 102:21]
    node _shin_T_35 = shr(_shin_T_31, 2) @[Bitwise.scala 103:21]
    node _shin_T_36 = and(_shin_T_35, _shin_T_34) @[Bitwise.scala 103:31]
    node _shin_T_37 = bits(_shin_T_31, 29, 0) @[Bitwise.scala 103:46]
    node _shin_T_38 = shl(_shin_T_37, 2) @[Bitwise.scala 103:65]
    node _shin_T_39 = not(_shin_T_34) @[Bitwise.scala 103:77]
    node _shin_T_40 = and(_shin_T_38, _shin_T_39) @[Bitwise.scala 103:75]
    node _shin_T_41 = or(_shin_T_36, _shin_T_40) @[Bitwise.scala 103:39]
    node _shin_T_42 = bits(_shin_T_34, 30, 0) @[Bitwise.scala 102:28]
    node _shin_T_43 = shl(_shin_T_42, 1) @[Bitwise.scala 102:47]
    node _shin_T_44 = xor(_shin_T_34, _shin_T_43) @[Bitwise.scala 102:21]
    node _shin_T_45 = shr(_shin_T_41, 1) @[Bitwise.scala 103:21]
    node _shin_T_46 = and(_shin_T_45, _shin_T_44) @[Bitwise.scala 103:31]
    node _shin_T_47 = bits(_shin_T_41, 30, 0) @[Bitwise.scala 103:46]
    node _shin_T_48 = shl(_shin_T_47, 1) @[Bitwise.scala 103:65]
    node _shin_T_49 = not(_shin_T_44) @[Bitwise.scala 103:77]
    node _shin_T_50 = and(_shin_T_48, _shin_T_49) @[Bitwise.scala 103:75]
    node _shin_T_51 = or(_shin_T_46, _shin_T_50) @[Bitwise.scala 103:39]
    node shin = mux(_shin_T, _shin_T_1, _shin_T_51) @[ALU.scala 33:19]
    node _shiftr_T = bits(io.alu_op, 0, 0) @[ALU.scala 34:32]
    node _shiftr_T_1 = bits(shin, 31, 31) @[ALU.scala 34:43]
    node shiftr_hi = and(_shiftr_T, _shiftr_T_1) @[ALU.scala 34:36]
    node _shiftr_T_2 = cat(shiftr_hi, shin) @[Cat.scala 30:58]
    node _shiftr_T_3 = asSInt(_shiftr_T_2) @[ALU.scala 34:57]
    node _shiftr_T_4 = dshr(_shiftr_T_3, shamt) @[ALU.scala 34:64]
    node shiftr = bits(_shiftr_T_4, 31, 0) @[ALU.scala 34:73]
    node _shiftl_T = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shiftl_T_1 = xor(UInt<32>("h0ffffffff"), _shiftl_T) @[Bitwise.scala 102:21]
    node _shiftl_T_2 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _shiftl_T_3 = and(_shiftl_T_2, _shiftl_T_1) @[Bitwise.scala 103:31]
    node _shiftl_T_4 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_5 = shl(_shiftl_T_4, 16) @[Bitwise.scala 103:65]
    node _shiftl_T_6 = not(_shiftl_T_1) @[Bitwise.scala 103:77]
    node _shiftl_T_7 = and(_shiftl_T_5, _shiftl_T_6) @[Bitwise.scala 103:75]
    node _shiftl_T_8 = or(_shiftl_T_3, _shiftl_T_7) @[Bitwise.scala 103:39]
    node _shiftl_T_9 = bits(_shiftl_T_1, 23, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_10 = shl(_shiftl_T_9, 8) @[Bitwise.scala 102:47]
    node _shiftl_T_11 = xor(_shiftl_T_1, _shiftl_T_10) @[Bitwise.scala 102:21]
    node _shiftl_T_12 = shr(_shiftl_T_8, 8) @[Bitwise.scala 103:21]
    node _shiftl_T_13 = and(_shiftl_T_12, _shiftl_T_11) @[Bitwise.scala 103:31]
    node _shiftl_T_14 = bits(_shiftl_T_8, 23, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_15 = shl(_shiftl_T_14, 8) @[Bitwise.scala 103:65]
    node _shiftl_T_16 = not(_shiftl_T_11) @[Bitwise.scala 103:77]
    node _shiftl_T_17 = and(_shiftl_T_15, _shiftl_T_16) @[Bitwise.scala 103:75]
    node _shiftl_T_18 = or(_shiftl_T_13, _shiftl_T_17) @[Bitwise.scala 103:39]
    node _shiftl_T_19 = bits(_shiftl_T_11, 27, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_20 = shl(_shiftl_T_19, 4) @[Bitwise.scala 102:47]
    node _shiftl_T_21 = xor(_shiftl_T_11, _shiftl_T_20) @[Bitwise.scala 102:21]
    node _shiftl_T_22 = shr(_shiftl_T_18, 4) @[Bitwise.scala 103:21]
    node _shiftl_T_23 = and(_shiftl_T_22, _shiftl_T_21) @[Bitwise.scala 103:31]
    node _shiftl_T_24 = bits(_shiftl_T_18, 27, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_25 = shl(_shiftl_T_24, 4) @[Bitwise.scala 103:65]
    node _shiftl_T_26 = not(_shiftl_T_21) @[Bitwise.scala 103:77]
    node _shiftl_T_27 = and(_shiftl_T_25, _shiftl_T_26) @[Bitwise.scala 103:75]
    node _shiftl_T_28 = or(_shiftl_T_23, _shiftl_T_27) @[Bitwise.scala 103:39]
    node _shiftl_T_29 = bits(_shiftl_T_21, 29, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_30 = shl(_shiftl_T_29, 2) @[Bitwise.scala 102:47]
    node _shiftl_T_31 = xor(_shiftl_T_21, _shiftl_T_30) @[Bitwise.scala 102:21]
    node _shiftl_T_32 = shr(_shiftl_T_28, 2) @[Bitwise.scala 103:21]
    node _shiftl_T_33 = and(_shiftl_T_32, _shiftl_T_31) @[Bitwise.scala 103:31]
    node _shiftl_T_34 = bits(_shiftl_T_28, 29, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_35 = shl(_shiftl_T_34, 2) @[Bitwise.scala 103:65]
    node _shiftl_T_36 = not(_shiftl_T_31) @[Bitwise.scala 103:77]
    node _shiftl_T_37 = and(_shiftl_T_35, _shiftl_T_36) @[Bitwise.scala 103:75]
    node _shiftl_T_38 = or(_shiftl_T_33, _shiftl_T_37) @[Bitwise.scala 103:39]
    node _shiftl_T_39 = bits(_shiftl_T_31, 30, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_40 = shl(_shiftl_T_39, 1) @[Bitwise.scala 102:47]
    node _shiftl_T_41 = xor(_shiftl_T_31, _shiftl_T_40) @[Bitwise.scala 102:21]
    node _shiftl_T_42 = shr(_shiftl_T_38, 1) @[Bitwise.scala 103:21]
    node _shiftl_T_43 = and(_shiftl_T_42, _shiftl_T_41) @[Bitwise.scala 103:31]
    node _shiftl_T_44 = bits(_shiftl_T_38, 30, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_45 = shl(_shiftl_T_44, 1) @[Bitwise.scala 103:65]
    node _shiftl_T_46 = not(_shiftl_T_41) @[Bitwise.scala 103:77]
    node _shiftl_T_47 = and(_shiftl_T_45, _shiftl_T_46) @[Bitwise.scala 103:75]
    node shiftl = or(_shiftl_T_43, _shiftl_T_47) @[Bitwise.scala 103:39]
    io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 38:12]
    node _T = eq(UInt<4>("h00"), io.alu_op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.out <= sum @[ALU.scala 41:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h01"), io.alu_op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.out <= sum @[ALU.scala 44:15]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<4>("h04"), io.alu_op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = lt(io.in_A, io.in_B) @[ALU.scala 47:29]
          when _T_3 : @[ALU.scala 47:48]
            io.out <= asSInt(UInt<2>("h01")) @[ALU.scala 48:20]
            skip @[ALU.scala 47:48]
          else : @[ALU.scala 50:19]
            io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 51:20]
            skip @[ALU.scala 50:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<4>("h06"), io.alu_op) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = asUInt(io.in_A) @[ALU.scala 56:28]
            node _T_6 = asUInt(io.in_B) @[ALU.scala 56:47]
            node _T_7 = lt(_T_5, _T_6) @[ALU.scala 56:31]
            when _T_7 : @[ALU.scala 56:50]
              io.out <= asSInt(UInt<2>("h01")) @[ALU.scala 57:20]
              skip @[ALU.scala 56:50]
            else : @[ALU.scala 59:19]
              io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 60:20]
              skip @[ALU.scala 59:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<4>("h0b"), io.alu_op) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _io_out_T = asSInt(shiftr) @[ALU.scala 65:30]
              io.out <= _io_out_T @[ALU.scala 65:15]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_9 = eq(UInt<4>("h0a"), io.alu_op) @[Conditional.scala 37:30]
              when _T_9 : @[Conditional.scala 39:67]
                node _io_out_T_1 = asSInt(shiftr) @[ALU.scala 68:24]
                io.out <= _io_out_T_1 @[ALU.scala 68:15]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_10 = eq(UInt<4>("h02"), io.alu_op) @[Conditional.scala 37:30]
                when _T_10 : @[Conditional.scala 39:67]
                  node _io_out_T_2 = asSInt(shiftl) @[ALU.scala 72:31]
                  io.out <= _io_out_T_2 @[ALU.scala 72:15]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_11 = eq(UInt<4>("h0e"), io.alu_op) @[Conditional.scala 37:30]
                  when _T_11 : @[Conditional.scala 39:67]
                    node _io_out_T_3 = and(io.in_A, io.in_B) @[ALU.scala 75:29]
                    node _io_out_T_4 = asSInt(_io_out_T_3) @[ALU.scala 75:29]
                    io.out <= _io_out_T_4 @[ALU.scala 75:15]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_12 = eq(UInt<4>("h0c"), io.alu_op) @[Conditional.scala 37:30]
                    when _T_12 : @[Conditional.scala 39:67]
                      node _io_out_T_5 = or(io.in_A, io.in_B) @[ALU.scala 78:29]
                      node _io_out_T_6 = asSInt(_io_out_T_5) @[ALU.scala 78:29]
                      io.out <= _io_out_T_6 @[ALU.scala 78:15]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_13 = eq(UInt<4>("h08"), io.alu_op) @[Conditional.scala 37:30]
                      when _T_13 : @[Conditional.scala 39:67]
                        node _io_out_T_7 = xor(io.in_A, io.in_B) @[ALU.scala 81:29]
                        node _io_out_T_8 = asSInt(_io_out_T_7) @[ALU.scala 81:29]
                        io.out <= _io_out_T_8 @[ALU.scala 81:15]
                        skip @[Conditional.scala 39:67]
    
  module Branch_Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip fun3 : UInt<3>, flip ina : SInt<32>, flip inb : SInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[Branch.scala 13:16]
    node _T = eq(UInt<1>("h00"), io.fun3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.ina, io.inb) @[Branch.scala 16:24]
      when _T_1 : @[Branch.scala 16:34]
        io.br_taken <= UInt<1>("h01") @[Branch.scala 17:28]
        skip @[Branch.scala 16:34]
      else : @[Branch.scala 19:23]
        io.br_taken <= UInt<1>("h00") @[Branch.scala 20:28]
        skip @[Branch.scala 19:23]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.fun3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.ina, io.inb) @[Branch.scala 25:25]
        when _T_3 : @[Branch.scala 25:36]
          io.br_taken <= UInt<1>("h01") @[Branch.scala 26:28]
          skip @[Branch.scala 25:36]
        else : @[Branch.scala 28:23]
          io.br_taken <= UInt<1>("h00") @[Branch.scala 29:28]
          skip @[Branch.scala 28:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.fun3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = lt(io.ina, io.inb) @[Branch.scala 33:24]
          when _T_5 : @[Branch.scala 33:32]
            io.br_taken <= UInt<1>("h01") @[Branch.scala 34:28]
            skip @[Branch.scala 33:32]
          else : @[Branch.scala 36:23]
            io.br_taken <= UInt<1>("h00") @[Branch.scala 37:28]
            skip @[Branch.scala 36:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<3>("h05"), io.fun3) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            node _T_7 = geq(io.ina, io.inb) @[Branch.scala 41:24]
            when _T_7 : @[Branch.scala 41:33]
              io.br_taken <= UInt<1>("h01") @[Branch.scala 42:28]
              skip @[Branch.scala 41:33]
            else : @[Branch.scala 44:23]
              io.br_taken <= UInt<1>("h00") @[Branch.scala 45:28]
              skip @[Branch.scala 44:23]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<3>("h06"), io.fun3) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _T_9 = lt(io.ina, io.inb) @[Branch.scala 49:24]
              when _T_9 : @[Branch.scala 49:32]
                io.br_taken <= UInt<1>("h01") @[Branch.scala 50:28]
                skip @[Branch.scala 49:32]
              else : @[Branch.scala 52:23]
                io.br_taken <= UInt<1>("h00") @[Branch.scala 53:28]
                skip @[Branch.scala 52:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_10 = eq(UInt<3>("h07"), io.fun3) @[Conditional.scala 37:30]
              when _T_10 : @[Conditional.scala 39:67]
                node _T_11 = geq(io.ina, io.inb) @[Branch.scala 58:24]
                when _T_11 : @[Branch.scala 58:33]
                  io.br_taken <= UInt<1>("h01") @[Branch.scala 59:28]
                  skip @[Branch.scala 58:33]
                else : @[Branch.scala 61:23]
                  io.br_taken <= UInt<1>("h00") @[Branch.scala 62:28]
                  skip @[Branch.scala 61:23]
                skip @[Conditional.scala 39:67]
    
  module execute : 
    input clock : Clock
    input reset : Reset
    output io : {out : SInt<32>, br_taken : UInt<1>, flip iform : UInt<1>, flip rform : UInt<1>, flip sform : UInt<1>, flip bform : UInt<1>, flip luiform : UInt<1>, flip Jalform : UInt<1>, flip jalrform : UInt<1>, flip lform : UInt<1>, flip Auipc : UInt<1>, flip lui_jal_jalr_auipc_imm : SInt<32>, flip immBits : UInt<12>, flip mem_wr_en : UInt<1>, flip wr_back : UInt<2>, flip br_fun3 : UInt<3>, flip load_storefun : UInt<3>, flip pcsel : UInt<1>, flip mem_r_en : UInt<1>, flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip aluop : UInt<4>, flip pc_out : UInt<32>, flip pc4_out : UInt<32>, flip imm_out : UInt<32>, flip RS1 : UInt<5>, flip RS2 : UInt<5>, flip Rd : UInt<5>, flip RegWr_en : UInt<1>, flip opA_in : UInt<2>, flip opB_in : UInt<1>, MemWen : UInt<1>, MemFun3 : UInt<3>, MemEnable : UInt<1>, MemDin : SInt<32>, MemToReg : UInt<2>, RDout : UInt<5>, RS2out : UInt<5>, RegWr_enout : UInt<1>, pco : UInt<32>, pcselout : UInt<1>, b_form : UInt<1>}
    
    inst alu of ALUS @[Execute.scala 61:21]
    alu.clock <= clock
    alu.reset <= reset
    inst B_control of Branch_Control @[Execute.scala 62:27]
    B_control.clock <= clock
    B_control.reset <= reset
    io.b_form <= io.bform @[Execute.scala 63:14]
    io.pcselout <= io.pcsel @[Execute.scala 65:16]
    io.RegWr_enout <= io.RegWr_en @[Execute.scala 66:19]
    io.RDout <= io.Rd @[Execute.scala 67:13]
    io.RS2out <= io.RS2 @[Execute.scala 68:14]
    node _T = or(io.bform, io.Jalform) @[Execute.scala 69:19]
    when _T : @[Execute.scala 69:32]
      node _alu_io_in_A_T = asSInt(io.pc_out) @[Execute.scala 70:39]
      alu.io.in_A <= _alu_io_in_A_T @[Execute.scala 70:20]
      skip @[Execute.scala 69:32]
    else : @[Execute.scala 72:15]
      alu.io.in_A <= io.rs1 @[Execute.scala 73:17]
      skip @[Execute.scala 72:15]
    when io.rform : @[Execute.scala 76:19]
      alu.io.in_B <= io.rs2 @[Execute.scala 77:16]
      skip @[Execute.scala 76:19]
    else : @[Execute.scala 79:15]
      node _T_1 = or(io.luiform, io.Jalform) @[Execute.scala 80:24]
      node _T_2 = or(_T_1, io.jalrform) @[Execute.scala 80:36]
      node _T_3 = or(_T_2, io.Auipc) @[Execute.scala 80:49]
      node _T_4 = or(_T_3, io.bform) @[Execute.scala 80:59]
      when _T_4 : @[Execute.scala 80:70]
        alu.io.in_B <= io.lui_jal_jalr_auipc_imm @[Execute.scala 81:24]
        skip @[Execute.scala 80:70]
      else : @[Execute.scala 83:19]
        node _alu_io_in_B_T = asSInt(io.imm_out) @[Execute.scala 84:39]
        alu.io.in_B <= _alu_io_in_B_T @[Execute.scala 84:20]
        skip @[Execute.scala 83:19]
      skip @[Execute.scala 79:15]
    alu.io.alu_op <= io.aluop @[Execute.scala 88:18]
    io.out <= alu.io.out @[Execute.scala 89:11]
    B_control.io.fun3 <= io.br_fun3 @[Execute.scala 91:33]
    B_control.io.ina <= io.rs1 @[Execute.scala 92:32]
    B_control.io.inb <= io.rs2 @[Execute.scala 93:32]
    io.br_taken <= B_control.io.br_taken @[Execute.scala 94:16]
    io.MemWen <= io.mem_wr_en @[Execute.scala 96:14]
    io.MemFun3 <= io.load_storefun @[Execute.scala 97:15]
    io.MemEnable <= io.mem_r_en @[Execute.scala 98:17]
    io.MemDin <= io.rs2 @[Execute.scala 99:14]
    io.MemToReg <= io.wr_back @[Execute.scala 100:16]
    io.pco <= io.pc_out @[Execute.scala 101:11]
    
  module Datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip addr : UInt<32>, flip Din : SInt<32>, Dout : SInt<32>, flip fun3 : UInt<3>, flip enable : UInt<1>}
    
    cmem memory : SInt<8>[4][1024] @[DataMem.scala 14:19]
    wire mask : UInt<1>[4] @[DataMem.scala 15:18]
    wire data : SInt<8>[4] @[DataMem.scala 16:18]
    wire tempread : SInt<8>[4] @[DataMem.scala 17:22]
    io.Dout <= asSInt(UInt<1>("h00")) @[DataMem.scala 19:11]
    node _data_0_T = bits(io.Din, 7, 0) @[DataMem.scala 21:20]
    node _data_0_T_1 = asSInt(_data_0_T) @[DataMem.scala 21:33]
    data[0] <= _data_0_T_1 @[DataMem.scala 21:11]
    node _data_1_T = bits(io.Din, 15, 8) @[DataMem.scala 22:20]
    node _data_1_T_1 = asSInt(_data_1_T) @[DataMem.scala 22:34]
    data[1] <= _data_1_T_1 @[DataMem.scala 22:11]
    node _data_2_T = bits(io.Din, 23, 16) @[DataMem.scala 23:20]
    node _data_2_T_1 = asSInt(_data_2_T) @[DataMem.scala 23:35]
    data[2] <= _data_2_T_1 @[DataMem.scala 23:11]
    node _data_3_T = bits(io.Din, 31, 24) @[DataMem.scala 24:20]
    node _data_3_T_1 = asSInt(_data_3_T) @[DataMem.scala 24:35]
    data[3] <= _data_3_T_1 @[DataMem.scala 24:11]
    tempread[0] <= asSInt(UInt<1>("h00")) @[DataMem.scala 26:15]
    tempread[1] <= asSInt(UInt<1>("h00")) @[DataMem.scala 27:15]
    tempread[2] <= asSInt(UInt<1>("h00")) @[DataMem.scala 28:15]
    tempread[3] <= asSInt(UInt<1>("h00")) @[DataMem.scala 29:15]
    mask[0] <= UInt<1>("h00") @[DataMem.scala 31:11]
    mask[1] <= UInt<1>("h00") @[DataMem.scala 32:11]
    mask[2] <= UInt<1>("h00") @[DataMem.scala 33:11]
    mask[3] <= UInt<1>("h00") @[DataMem.scala 34:11]
    when io.Wen : @[DataMem.scala 36:16]
      node _T = eq(io.fun3, UInt<1>("h00")) @[DataMem.scala 37:18]
      when _T : @[DataMem.scala 37:27]
        node _T_1 = bits(io.addr, 1, 0) @[DataMem.scala 38:19]
        node _T_2 = eq(_T_1, UInt<1>("h00")) @[DataMem.scala 38:26]
        when _T_2 : @[DataMem.scala 38:35]
          mask[0] <= UInt<1>("h01") @[DataMem.scala 39:17]
          mask[1] <= UInt<1>("h00") @[DataMem.scala 40:17]
          mask[2] <= UInt<1>("h00") @[DataMem.scala 41:17]
          mask[3] <= UInt<1>("h00") @[DataMem.scala 42:17]
          skip @[DataMem.scala 38:35]
        else : @[DataMem.scala 43:41]
          node _T_3 = bits(io.addr, 1, 0) @[DataMem.scala 43:25]
          node _T_4 = eq(_T_3, UInt<1>("h01")) @[DataMem.scala 43:32]
          when _T_4 : @[DataMem.scala 43:41]
            mask[0] <= UInt<1>("h00") @[DataMem.scala 44:17]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 45:17]
            mask[2] <= UInt<1>("h00") @[DataMem.scala 46:17]
            mask[3] <= UInt<1>("h00") @[DataMem.scala 47:17]
            node _data_1_T_2 = bits(io.Din, 7, 0) @[DataMem.scala 49:26]
            node _data_1_T_3 = asSInt(_data_1_T_2) @[DataMem.scala 49:39]
            data[1] <= _data_1_T_3 @[DataMem.scala 49:17]
            skip @[DataMem.scala 43:41]
          else : @[DataMem.scala 52:41]
            node _T_5 = bits(io.addr, 1, 0) @[DataMem.scala 52:25]
            node _T_6 = eq(_T_5, UInt<2>("h02")) @[DataMem.scala 52:32]
            when _T_6 : @[DataMem.scala 52:41]
              mask[0] <= UInt<1>("h00") @[DataMem.scala 53:17]
              mask[1] <= UInt<1>("h00") @[DataMem.scala 54:17]
              mask[2] <= UInt<1>("h01") @[DataMem.scala 55:17]
              mask[3] <= UInt<1>("h00") @[DataMem.scala 56:17]
              node _data_2_T_2 = bits(io.Din, 7, 0) @[DataMem.scala 58:26]
              node _data_2_T_3 = asSInt(_data_2_T_2) @[DataMem.scala 58:39]
              data[2] <= _data_2_T_3 @[DataMem.scala 58:17]
              skip @[DataMem.scala 52:41]
            else : @[DataMem.scala 61:41]
              node _T_7 = bits(io.addr, 1, 0) @[DataMem.scala 61:25]
              node _T_8 = eq(_T_7, UInt<2>("h03")) @[DataMem.scala 61:32]
              when _T_8 : @[DataMem.scala 61:41]
                mask[0] <= UInt<1>("h00") @[DataMem.scala 62:17]
                mask[1] <= UInt<1>("h00") @[DataMem.scala 63:17]
                mask[2] <= UInt<1>("h00") @[DataMem.scala 64:17]
                mask[3] <= UInt<1>("h01") @[DataMem.scala 65:17]
                node _data_3_T_2 = bits(io.Din, 7, 0) @[DataMem.scala 67:26]
                node _data_3_T_3 = asSInt(_data_3_T_2) @[DataMem.scala 67:39]
                data[3] <= _data_3_T_3 @[DataMem.scala 67:17]
                skip @[DataMem.scala 61:41]
        skip @[DataMem.scala 37:27]
      else : @[DataMem.scala 71:34]
        node _T_9 = eq(io.fun3, UInt<1>("h01")) @[DataMem.scala 71:25]
        when _T_9 : @[DataMem.scala 71:34]
          node _T_10 = bits(io.addr, 1, 0) @[DataMem.scala 72:21]
          node _T_11 = eq(_T_10, UInt<1>("h00")) @[DataMem.scala 72:28]
          when _T_11 : @[DataMem.scala 72:37]
            mask[0] <= UInt<1>("h01") @[DataMem.scala 73:19]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 74:19]
            mask[2] <= UInt<1>("h00") @[DataMem.scala 75:19]
            mask[3] <= UInt<1>("h00") @[DataMem.scala 76:19]
            skip @[DataMem.scala 72:37]
          else : @[DataMem.scala 78:43]
            node _T_12 = bits(io.addr, 1, 0) @[DataMem.scala 78:27]
            node _T_13 = eq(_T_12, UInt<1>("h01")) @[DataMem.scala 78:34]
            when _T_13 : @[DataMem.scala 78:43]
              mask[0] <= UInt<1>("h00") @[DataMem.scala 79:19]
              mask[1] <= UInt<1>("h01") @[DataMem.scala 80:19]
              mask[2] <= UInt<1>("h01") @[DataMem.scala 81:19]
              mask[3] <= UInt<1>("h00") @[DataMem.scala 82:19]
              node _data_1_T_4 = bits(io.Din, 7, 0) @[DataMem.scala 84:28]
              node _data_1_T_5 = asSInt(_data_1_T_4) @[DataMem.scala 84:41]
              data[1] <= _data_1_T_5 @[DataMem.scala 84:19]
              node _data_2_T_4 = bits(io.Din, 15, 8) @[DataMem.scala 85:28]
              node _data_2_T_5 = asSInt(_data_2_T_4) @[DataMem.scala 85:42]
              data[2] <= _data_2_T_5 @[DataMem.scala 85:19]
              skip @[DataMem.scala 78:43]
            else : @[DataMem.scala 88:43]
              node _T_14 = bits(io.addr, 1, 0) @[DataMem.scala 88:27]
              node _T_15 = eq(_T_14, UInt<2>("h02")) @[DataMem.scala 88:34]
              when _T_15 : @[DataMem.scala 88:43]
                mask[0] <= UInt<1>("h00") @[DataMem.scala 89:19]
                mask[1] <= UInt<1>("h00") @[DataMem.scala 90:19]
                mask[2] <= UInt<1>("h01") @[DataMem.scala 91:19]
                mask[3] <= UInt<1>("h01") @[DataMem.scala 92:19]
                node _data_2_T_6 = bits(io.Din, 7, 0) @[DataMem.scala 94:28]
                node _data_2_T_7 = asSInt(_data_2_T_6) @[DataMem.scala 94:41]
                data[2] <= _data_2_T_7 @[DataMem.scala 94:19]
                node _data_3_T_4 = bits(io.Din, 15, 8) @[DataMem.scala 95:28]
                node _data_3_T_5 = asSInt(_data_3_T_4) @[DataMem.scala 95:42]
                data[3] <= _data_3_T_5 @[DataMem.scala 95:19]
                skip @[DataMem.scala 88:43]
              else : @[DataMem.scala 98:43]
                node _T_16 = bits(io.addr, 1, 0) @[DataMem.scala 98:27]
                node _T_17 = eq(_T_16, UInt<2>("h03")) @[DataMem.scala 98:34]
                when _T_17 : @[DataMem.scala 98:43]
                  mask[0] <= UInt<1>("h00") @[DataMem.scala 99:19]
                  mask[1] <= UInt<1>("h00") @[DataMem.scala 100:19]
                  mask[2] <= UInt<1>("h00") @[DataMem.scala 101:19]
                  mask[3] <= UInt<1>("h01") @[DataMem.scala 102:19]
                  node _data_3_T_6 = bits(io.Din, 7, 0) @[DataMem.scala 104:28]
                  node _data_3_T_7 = asSInt(_data_3_T_6) @[DataMem.scala 104:41]
                  data[3] <= _data_3_T_7 @[DataMem.scala 104:19]
                  skip @[DataMem.scala 98:43]
          skip @[DataMem.scala 71:34]
        else : @[DataMem.scala 108:34]
          node _T_18 = eq(io.fun3, UInt<2>("h02")) @[DataMem.scala 108:25]
          when _T_18 : @[DataMem.scala 108:34]
            mask[0] <= UInt<1>("h01") @[DataMem.scala 109:17]
            mask[1] <= UInt<1>("h01") @[DataMem.scala 110:17]
            mask[2] <= UInt<1>("h01") @[DataMem.scala 111:17]
            mask[3] <= UInt<1>("h01") @[DataMem.scala 112:17]
            skip @[DataMem.scala 108:34]
      mask[0] <= UInt<1>("h01") @[DataMem.scala 115:15]
      mask[1] <= UInt<1>("h00") @[DataMem.scala 116:15]
      mask[2] <= UInt<1>("h00") @[DataMem.scala 117:15]
      mask[3] <= UInt<1>("h00") @[DataMem.scala 118:15]
      node _T_19 = bits(io.addr, 31, 2) @[DataMem.scala 119:25]
      node _T_20 = bits(_T_19, 9, 0)
      write mport MPORT = memory[_T_20], clock
      when mask[0] :
        MPORT[0] <= data[0]
        skip
      when mask[1] :
        MPORT[1] <= data[1]
        skip
      when mask[2] :
        MPORT[2] <= data[2]
        skip
      when mask[3] :
        MPORT[3] <= data[3]
        skip
      skip @[DataMem.scala 36:16]
    node _T_21 = bits(io.addr, 31, 2) @[DataMem.scala 124:34]
    node _T_22 = bits(_T_21, 9, 0) @[DataMem.scala 124:26]
    read mport MPORT_1 = memory[_T_22], clock @[DataMem.scala 124:26]
    tempread[0] <= MPORT_1[0] @[DataMem.scala 124:12]
    tempread[1] <= MPORT_1[1] @[DataMem.scala 124:12]
    tempread[2] <= MPORT_1[2] @[DataMem.scala 124:12]
    tempread[3] <= MPORT_1[3] @[DataMem.scala 124:12]
    when io.enable : @[DataMem.scala 125:18]
      node _T_23 = bits(io.addr, 31, 2) @[DataMem.scala 126:34]
      node _T_24 = bits(_T_23, 9, 0) @[DataMem.scala 126:26]
      read mport MPORT_2 = memory[_T_24], clock @[DataMem.scala 126:26]
      tempread[0] <= MPORT_2[0] @[DataMem.scala 126:12]
      tempread[1] <= MPORT_2[1] @[DataMem.scala 126:12]
      tempread[2] <= MPORT_2[2] @[DataMem.scala 126:12]
      tempread[3] <= MPORT_2[3] @[DataMem.scala 126:12]
      node _T_25 = eq(io.fun3, UInt<1>("h00")) @[DataMem.scala 127:16]
      when _T_25 : @[DataMem.scala 127:25]
        node _T_26 = bits(io.addr, 1, 0) @[DataMem.scala 128:17]
        node _T_27 = eq(_T_26, UInt<1>("h00")) @[DataMem.scala 128:23]
        when _T_27 : @[DataMem.scala 128:31]
          node _io_Dout_T = bits(tempread[0], 7, 7) @[DataMem.scala 129:39]
          node _io_Dout_T_1 = bits(_io_Dout_T, 0, 0) @[Bitwise.scala 72:15]
          node io_Dout_hi = mux(_io_Dout_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node io_Dout_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
          node _io_Dout_T_2 = cat(io_Dout_hi, io_Dout_lo) @[Cat.scala 30:58]
          node _io_Dout_T_3 = asSInt(_io_Dout_T_2) @[DataMem.scala 129:63]
          io.Dout <= _io_Dout_T_3 @[DataMem.scala 129:13]
          skip @[DataMem.scala 128:31]
        else : @[DataMem.scala 130:35]
          node _T_28 = bits(io.addr, 1, 0) @[DataMem.scala 130:22]
          node _T_29 = eq(_T_28, UInt<1>("h01")) @[DataMem.scala 130:27]
          when _T_29 : @[DataMem.scala 130:35]
            node _io_Dout_T_4 = bits(tempread[1], 7, 7) @[DataMem.scala 131:39]
            node _io_Dout_T_5 = bits(_io_Dout_T_4, 0, 0) @[Bitwise.scala 72:15]
            node io_Dout_hi_1 = mux(_io_Dout_T_5, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node io_Dout_lo_1 = asUInt(tempread[1]) @[Cat.scala 30:58]
            node _io_Dout_T_6 = cat(io_Dout_hi_1, io_Dout_lo_1) @[Cat.scala 30:58]
            node _io_Dout_T_7 = asSInt(_io_Dout_T_6) @[DataMem.scala 131:63]
            io.Dout <= _io_Dout_T_7 @[DataMem.scala 131:13]
            skip @[DataMem.scala 130:35]
          else : @[DataMem.scala 132:35]
            node _T_30 = bits(io.addr, 1, 0) @[DataMem.scala 132:22]
            node _T_31 = eq(_T_30, UInt<2>("h02")) @[DataMem.scala 132:27]
            when _T_31 : @[DataMem.scala 132:35]
              node _io_Dout_T_8 = bits(tempread[2], 7, 7) @[DataMem.scala 133:39]
              node _io_Dout_T_9 = bits(_io_Dout_T_8, 0, 0) @[Bitwise.scala 72:15]
              node io_Dout_hi_2 = mux(_io_Dout_T_9, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node io_Dout_lo_2 = asUInt(tempread[2]) @[Cat.scala 30:58]
              node _io_Dout_T_10 = cat(io_Dout_hi_2, io_Dout_lo_2) @[Cat.scala 30:58]
              node _io_Dout_T_11 = asSInt(_io_Dout_T_10) @[DataMem.scala 133:63]
              io.Dout <= _io_Dout_T_11 @[DataMem.scala 133:13]
              skip @[DataMem.scala 132:35]
            else : @[DataMem.scala 134:35]
              node _T_32 = bits(io.addr, 1, 0) @[DataMem.scala 134:22]
              node _T_33 = eq(_T_32, UInt<2>("h03")) @[DataMem.scala 134:27]
              when _T_33 : @[DataMem.scala 134:35]
                node _io_Dout_T_12 = bits(tempread[3], 7, 7) @[DataMem.scala 135:39]
                node _io_Dout_T_13 = bits(_io_Dout_T_12, 0, 0) @[Bitwise.scala 72:15]
                node io_Dout_hi_3 = mux(_io_Dout_T_13, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node io_Dout_lo_3 = asUInt(tempread[3]) @[Cat.scala 30:58]
                node _io_Dout_T_14 = cat(io_Dout_hi_3, io_Dout_lo_3) @[Cat.scala 30:58]
                node _io_Dout_T_15 = asSInt(_io_Dout_T_14) @[DataMem.scala 135:63]
                io.Dout <= _io_Dout_T_15 @[DataMem.scala 135:13]
                skip @[DataMem.scala 134:35]
        skip @[DataMem.scala 127:25]
      else : @[DataMem.scala 137:31]
        node _T_34 = eq(io.fun3, UInt<1>("h01")) @[DataMem.scala 137:22]
        when _T_34 : @[DataMem.scala 137:31]
          node _T_35 = bits(io.addr, 1, 0) @[DataMem.scala 138:17]
          node _T_36 = eq(_T_35, UInt<1>("h00")) @[DataMem.scala 138:23]
          when _T_36 : @[DataMem.scala 138:31]
            node _io_Dout_T_16 = bits(tempread[0], 7, 7) @[DataMem.scala 139:39]
            node _io_Dout_T_17 = bits(_io_Dout_T_16, 0, 0) @[Bitwise.scala 72:15]
            node io_Dout_hi_hi = mux(_io_Dout_T_17, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node io_Dout_lo_4 = asUInt(tempread[1]) @[Cat.scala 30:58]
            node io_Dout_hi_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
            node io_Dout_hi_4 = cat(io_Dout_hi_hi, io_Dout_hi_lo) @[Cat.scala 30:58]
            node _io_Dout_T_18 = cat(io_Dout_hi_4, io_Dout_lo_4) @[Cat.scala 30:58]
            node _io_Dout_T_19 = asSInt(_io_Dout_T_18) @[DataMem.scala 139:75]
            io.Dout <= _io_Dout_T_19 @[DataMem.scala 139:13]
            skip @[DataMem.scala 138:31]
          else : @[DataMem.scala 140:35]
            node _T_37 = bits(io.addr, 1, 0) @[DataMem.scala 140:22]
            node _T_38 = eq(_T_37, UInt<1>("h01")) @[DataMem.scala 140:27]
            when _T_38 : @[DataMem.scala 140:35]
              node _io_Dout_T_20 = bits(tempread[1], 7, 7) @[DataMem.scala 141:39]
              node _io_Dout_T_21 = bits(_io_Dout_T_20, 0, 0) @[Bitwise.scala 72:15]
              node io_Dout_hi_hi_1 = mux(_io_Dout_T_21, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node io_Dout_lo_5 = asUInt(tempread[2]) @[Cat.scala 30:58]
              node io_Dout_hi_lo_1 = asUInt(tempread[1]) @[Cat.scala 30:58]
              node io_Dout_hi_5 = cat(io_Dout_hi_hi_1, io_Dout_hi_lo_1) @[Cat.scala 30:58]
              node _io_Dout_T_22 = cat(io_Dout_hi_5, io_Dout_lo_5) @[Cat.scala 30:58]
              node _io_Dout_T_23 = asSInt(_io_Dout_T_22) @[DataMem.scala 141:75]
              io.Dout <= _io_Dout_T_23 @[DataMem.scala 141:13]
              skip @[DataMem.scala 140:35]
            else : @[DataMem.scala 142:35]
              node _T_39 = bits(io.addr, 1, 0) @[DataMem.scala 142:22]
              node _T_40 = eq(_T_39, UInt<2>("h02")) @[DataMem.scala 142:27]
              when _T_40 : @[DataMem.scala 142:35]
                node _io_Dout_T_24 = bits(tempread[2], 7, 7) @[DataMem.scala 143:39]
                node _io_Dout_T_25 = bits(_io_Dout_T_24, 0, 0) @[Bitwise.scala 72:15]
                node io_Dout_hi_hi_2 = mux(_io_Dout_T_25, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node io_Dout_lo_6 = asUInt(tempread[3]) @[Cat.scala 30:58]
                node io_Dout_hi_lo_2 = asUInt(tempread[2]) @[Cat.scala 30:58]
                node io_Dout_hi_6 = cat(io_Dout_hi_hi_2, io_Dout_hi_lo_2) @[Cat.scala 30:58]
                node _io_Dout_T_26 = cat(io_Dout_hi_6, io_Dout_lo_6) @[Cat.scala 30:58]
                node _io_Dout_T_27 = asSInt(_io_Dout_T_26) @[DataMem.scala 143:75]
                io.Dout <= _io_Dout_T_27 @[DataMem.scala 143:13]
                skip @[DataMem.scala 142:35]
              else : @[DataMem.scala 144:35]
                node _T_41 = bits(io.addr, 1, 0) @[DataMem.scala 144:22]
                node _T_42 = eq(_T_41, UInt<2>("h03")) @[DataMem.scala 144:27]
                when _T_42 : @[DataMem.scala 144:35]
                  node _io_Dout_T_28 = bits(tempread[3], 7, 7) @[DataMem.scala 145:39]
                  node _io_Dout_T_29 = bits(_io_Dout_T_28, 0, 0) @[Bitwise.scala 72:15]
                  node io_Dout_hi_7 = mux(_io_Dout_T_29, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node io_Dout_lo_7 = asUInt(tempread[3]) @[Cat.scala 30:58]
                  node _io_Dout_T_30 = cat(io_Dout_hi_7, io_Dout_lo_7) @[Cat.scala 30:58]
                  node _io_Dout_T_31 = asSInt(_io_Dout_T_30) @[DataMem.scala 145:63]
                  io.Dout <= _io_Dout_T_31 @[DataMem.scala 145:13]
                  skip @[DataMem.scala 144:35]
          skip @[DataMem.scala 137:31]
        else : @[DataMem.scala 147:31]
          node _T_43 = eq(io.fun3, UInt<2>("h02")) @[DataMem.scala 147:22]
          when _T_43 : @[DataMem.scala 147:31]
            node io_Dout_lo_lo = asUInt(tempread[0]) @[Cat.scala 30:58]
            node io_Dout_lo_hi = asUInt(tempread[1]) @[Cat.scala 30:58]
            node io_Dout_lo_8 = cat(io_Dout_lo_hi, io_Dout_lo_lo) @[Cat.scala 30:58]
            node io_Dout_hi_lo_3 = asUInt(tempread[2]) @[Cat.scala 30:58]
            node io_Dout_hi_hi_3 = asUInt(tempread[3]) @[Cat.scala 30:58]
            node io_Dout_hi_8 = cat(io_Dout_hi_hi_3, io_Dout_hi_lo_3) @[Cat.scala 30:58]
            node _io_Dout_T_32 = cat(io_Dout_hi_8, io_Dout_lo_8) @[Cat.scala 30:58]
            node _io_Dout_T_33 = asSInt(_io_Dout_T_32) @[DataMem.scala 148:78]
            io.Dout <= _io_Dout_T_33 @[DataMem.scala 148:13]
            skip @[DataMem.scala 147:31]
      skip @[DataMem.scala 125:18]
    
  module memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip out : SInt<32>, flip br_taken : UInt<1>, flip bform : UInt<1>, flip Wen : UInt<1>, flip Fun3 : UInt<3>, flip Enable : UInt<1>, flip Din : SInt<32>, flip MemToReg : UInt<2>, flip RDout : UInt<5>, flip RS2out : UInt<5>, flip RegWr_enout : UInt<1>, flip pco : UInt<32>, flip pcselout : UInt<1>, RegWr_enOut : UInt<1>, memtoreg : UInt<2>, RDsel : UInt<5>, Memrd : UInt<1>, Dout : SInt<32>, alu_out : SInt<32>, pcout : UInt<32>, brtaken : UInt<1>, pcsel : UInt<1>, b_form : UInt<1>}
    
    inst D_Mem of Datamem @[Memory.scala 41:23]
    D_Mem.clock <= clock
    D_Mem.reset <= reset
    io.pcout <= io.pco @[Memory.scala 42:13]
    io.pcsel <= io.pcselout @[Memory.scala 43:13]
    io.b_form <= io.bform @[Memory.scala 44:14]
    D_Mem.io.Wen <= io.Wen @[Memory.scala 46:17]
    node _D_Mem_io_addr_T = asUInt(io.out) @[Memory.scala 47:33]
    D_Mem.io.addr <= _D_Mem_io_addr_T @[Memory.scala 47:18]
    D_Mem.io.Din <= io.Din @[Memory.scala 48:17]
    D_Mem.io.fun3 <= io.Fun3 @[Memory.scala 49:18]
    D_Mem.io.enable <= io.Enable @[Memory.scala 50:20]
    io.Dout <= D_Mem.io.Dout @[Memory.scala 52:12]
    io.RegWr_enOut <= io.RegWr_enout @[Memory.scala 54:19]
    io.memtoreg <= io.MemToReg @[Memory.scala 55:16]
    io.RDsel <= io.RDout @[Memory.scala 56:13]
    io.Memrd <= io.Enable @[Memory.scala 57:13]
    io.alu_out <= io.out @[Memory.scala 58:15]
    io.brtaken <= io.br_taken @[Memory.scala 60:15]
    
  module Write_back : 
    input clock : Clock
    input reset : Reset
    output io : {flip RegWr_enOut : UInt<1>, flip memtoreg : UInt<2>, flip RDsel : UInt<5>, flip Memrd : UInt<1>, flip Dout : SInt<32>, flip alu_out : SInt<32>, flip pcout : UInt<32>, flip brtaken : UInt<1>, flip bform : UInt<1>, flip pcsel : UInt<1>, Rd : SInt<32>, br_taken : UInt<1>, b_form : UInt<1>, RDselout : UInt<5>, aluout : SInt<32>, pcselout : UInt<1>, RegWr_enout : UInt<1>}
    
    io.br_taken <= io.brtaken @[Write_back.scala 26:27]
    io.b_form <= io.bform @[Write_back.scala 27:14]
    io.aluout <= io.alu_out @[Write_back.scala 28:14]
    io.pcselout <= io.pcsel @[Write_back.scala 29:16]
    io.RegWr_enout <= io.RegWr_enOut @[Write_back.scala 30:19]
    node _T = eq(io.memtoreg, UInt<1>("h00")) @[Write_back.scala 31:21]
    when _T : @[Write_back.scala 31:28]
      io.Rd <= io.Dout @[Write_back.scala 32:10]
      skip @[Write_back.scala 31:28]
    else : @[Write_back.scala 35:32]
      node _T_1 = eq(io.memtoreg, UInt<1>("h01")) @[Write_back.scala 35:25]
      when _T_1 : @[Write_back.scala 35:32]
        io.Rd <= io.alu_out @[Write_back.scala 36:10]
        skip @[Write_back.scala 35:32]
      else : @[Write_back.scala 38:32]
        node _T_2 = eq(io.memtoreg, UInt<2>("h02")) @[Write_back.scala 38:25]
        when _T_2 : @[Write_back.scala 38:32]
          node _io_Rd_T = add(io.pcout, UInt<3>("h04")) @[Write_back.scala 39:22]
          node _io_Rd_T_1 = tail(_io_Rd_T, 1) @[Write_back.scala 39:22]
          node _io_Rd_T_2 = asSInt(_io_Rd_T_1) @[Write_back.scala 39:34]
          io.Rd <= _io_Rd_T_2 @[Write_back.scala 39:10]
          skip @[Write_back.scala 38:32]
        else : @[Write_back.scala 41:14]
          io.Rd <= asSInt(UInt<1>("h00")) @[Write_back.scala 42:10]
          skip @[Write_back.scala 41:14]
    io.RDselout <= io.RDsel @[Write_back.scala 44:15]
    
  module Forwarding : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEXrs1 : UInt<5>, flip IDEXrs2 : UInt<5>, flip ExMemRd : UInt<5>, flip ExMemRegWr_en : UInt<1>, flip MemWbRd : UInt<5>, flip MemWbRegWr_en : UInt<1>, Fa : UInt<2>, Fb : UInt<2>}
    
    io.Fa <= UInt<1>("h00") @[Forwarding.scala 19:7]
    io.Fb <= UInt<1>("h00") @[Forwarding.scala 20:7]
    node _T = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 23:23]
    node _T_1 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 23:48]
    node _T_2 = and(_T, _T_1) @[Forwarding.scala 23:34]
    node _T_3 = eq(io.ExMemRd, io.IDEXrs1) @[Forwarding.scala 24:21]
    node _T_4 = and(_T_2, _T_3) @[Forwarding.scala 23:63]
    node _T_5 = eq(io.ExMemRd, io.IDEXrs2) @[Forwarding.scala 24:59]
    node _T_6 = and(_T_4, _T_5) @[Forwarding.scala 24:44]
    when _T_6 : @[Forwarding.scala 24:76]
      io.Fa <= UInt<2>("h02") @[Forwarding.scala 25:11]
      io.Fb <= UInt<2>("h02") @[Forwarding.scala 26:11]
      skip @[Forwarding.scala 24:76]
    else : @[Forwarding.scala 29:38]
      node _T_7 = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 28:29]
      node _T_8 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 28:54]
      node _T_9 = and(_T_7, _T_8) @[Forwarding.scala 28:40]
      node _T_10 = eq(io.ExMemRd, io.IDEXrs2) @[Forwarding.scala 29:21]
      node _T_11 = and(_T_9, _T_10) @[Forwarding.scala 28:69]
      when _T_11 : @[Forwarding.scala 29:38]
        io.Fb <= UInt<2>("h02") @[Forwarding.scala 30:11]
        skip @[Forwarding.scala 29:38]
      else : @[Forwarding.scala 33:38]
        node _T_12 = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 32:29]
        node _T_13 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 32:54]
        node _T_14 = and(_T_12, _T_13) @[Forwarding.scala 32:40]
        node _T_15 = eq(io.ExMemRd, io.IDEXrs1) @[Forwarding.scala 33:21]
        node _T_16 = and(_T_14, _T_15) @[Forwarding.scala 32:69]
        when _T_16 : @[Forwarding.scala 33:38]
          io.Fa <= UInt<2>("h02") @[Forwarding.scala 34:11]
          skip @[Forwarding.scala 33:38]
    node _T_17 = eq(io.MemWbRegWr_en, UInt<1>("h01")) @[Forwarding.scala 38:24]
    node _T_18 = neq(io.MemWbRd, UInt<1>("h00")) @[Forwarding.scala 38:51]
    node _T_19 = and(_T_17, _T_18) @[Forwarding.scala 38:36]
    node _T_20 = eq(io.MemWbRd, io.IDEXrs1) @[Forwarding.scala 38:82]
    node _T_21 = and(_T_19, _T_20) @[Forwarding.scala 38:67]
    node _T_22 = eq(io.MemWbRd, io.IDEXrs2) @[Forwarding.scala 38:113]
    node _T_23 = and(_T_21, _T_22) @[Forwarding.scala 38:98]
    node _T_24 = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 39:28]
    node _T_25 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 39:53]
    node _T_26 = and(_T_24, _T_25) @[Forwarding.scala 39:39]
    node _T_27 = eq(io.ExMemRd, io.IDEXrs1) @[Forwarding.scala 39:83]
    node _T_28 = and(_T_26, _T_27) @[Forwarding.scala 39:68]
    node _T_29 = eq(io.ExMemRd, io.IDEXrs2) @[Forwarding.scala 39:114]
    node _T_30 = and(_T_28, _T_29) @[Forwarding.scala 39:99]
    node _T_31 = not(_T_30) @[Forwarding.scala 39:9]
    node _T_32 = and(_T_23, _T_31) @[Forwarding.scala 38:129]
    when _T_32 : @[Forwarding.scala 39:132]
      io.Fa <= UInt<1>("h01") @[Forwarding.scala 40:11]
      io.Fb <= UInt<1>("h01") @[Forwarding.scala 41:11]
      skip @[Forwarding.scala 39:132]
    else : @[Forwarding.scala 44:100]
      node _T_33 = eq(io.MemWbRegWr_en, UInt<1>("h01")) @[Forwarding.scala 43:30]
      node _T_34 = neq(io.MemWbRd, UInt<1>("h00")) @[Forwarding.scala 43:57]
      node _T_35 = and(_T_33, _T_34) @[Forwarding.scala 43:42]
      node _T_36 = eq(io.MemWbRd, io.IDEXrs2) @[Forwarding.scala 43:88]
      node _T_37 = and(_T_35, _T_36) @[Forwarding.scala 43:73]
      node _T_38 = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 44:28]
      node _T_39 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 44:53]
      node _T_40 = and(_T_38, _T_39) @[Forwarding.scala 44:39]
      node _T_41 = eq(io.ExMemRd, io.IDEXrs2) @[Forwarding.scala 44:83]
      node _T_42 = and(_T_40, _T_41) @[Forwarding.scala 44:68]
      node _T_43 = not(_T_42) @[Forwarding.scala 44:9]
      node _T_44 = and(_T_37, _T_43) @[Forwarding.scala 43:104]
      when _T_44 : @[Forwarding.scala 44:100]
        io.Fb <= UInt<1>("h01") @[Forwarding.scala 45:11]
        skip @[Forwarding.scala 44:100]
      else : @[Forwarding.scala 48:100]
        node _T_45 = eq(io.MemWbRegWr_en, UInt<1>("h01")) @[Forwarding.scala 47:30]
        node _T_46 = neq(io.MemWbRd, UInt<1>("h00")) @[Forwarding.scala 47:57]
        node _T_47 = and(_T_45, _T_46) @[Forwarding.scala 47:42]
        node _T_48 = eq(io.MemWbRd, io.IDEXrs1) @[Forwarding.scala 47:88]
        node _T_49 = and(_T_47, _T_48) @[Forwarding.scala 47:73]
        node _T_50 = eq(io.ExMemRegWr_en, UInt<1>("h01")) @[Forwarding.scala 48:28]
        node _T_51 = neq(io.ExMemRd, UInt<1>("h00")) @[Forwarding.scala 48:53]
        node _T_52 = and(_T_50, _T_51) @[Forwarding.scala 48:39]
        node _T_53 = eq(io.ExMemRd, io.IDEXrs1) @[Forwarding.scala 48:83]
        node _T_54 = and(_T_52, _T_53) @[Forwarding.scala 48:68]
        node _T_55 = not(_T_54) @[Forwarding.scala 48:9]
        node _T_56 = and(_T_49, _T_55) @[Forwarding.scala 47:104]
        when _T_56 : @[Forwarding.scala 48:100]
          io.Fa <= UInt<1>("h01") @[Forwarding.scala 49:11]
          skip @[Forwarding.scala 48:100]
    
  module HazardDetectionUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_instr : UInt<32>, flip ID_EX_memread : UInt<1>, flip ID_EX_rd : UInt<5>, flip pc_in : UInt<32>, flip current_pc_in : UInt<32>, instr_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, instr_out : UInt<32>, pc_out : UInt<32>, current_pc_out : UInt<32>}
    
    node rs1_sel = bits(io.IF_ID_instr, 19, 15) @[HazardDetectionUnit.scala 23:33]
    node rs2_sel = bits(io.IF_ID_instr, 24, 20) @[HazardDetectionUnit.scala 24:33]
    node _T = eq(io.ID_EX_memread, UInt<1>("h01")) @[HazardDetectionUnit.scala 25:27]
    node _T_1 = eq(io.ID_EX_rd, rs1_sel) @[HazardDetectionUnit.scala 25:52]
    node _T_2 = eq(io.ID_EX_rd, rs2_sel) @[HazardDetectionUnit.scala 25:81]
    node _T_3 = or(_T_1, _T_2) @[HazardDetectionUnit.scala 25:65]
    node _T_4 = and(_T, _T_3) @[HazardDetectionUnit.scala 25:35]
    when _T_4 : @[HazardDetectionUnit.scala 25:96]
      io.instr_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 26:26]
      io.pc_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 27:23]
      io.ctrl_forward <= UInt<1>("h01") @[HazardDetectionUnit.scala 28:25]
      io.instr_out <= io.IF_ID_instr @[HazardDetectionUnit.scala 29:22]
      io.pc_out <= io.pc_in @[HazardDetectionUnit.scala 30:19]
      io.current_pc_out <= io.current_pc_in @[HazardDetectionUnit.scala 31:27]
      skip @[HazardDetectionUnit.scala 25:96]
    else : @[HazardDetectionUnit.scala 33:16]
      io.instr_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 34:26]
      io.pc_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 35:23]
      io.ctrl_forward <= UInt<1>("h00") @[HazardDetectionUnit.scala 36:25]
      io.instr_out <= io.IF_ID_instr @[HazardDetectionUnit.scala 37:22]
      io.pc_out <= io.pc_in @[HazardDetectionUnit.scala 38:19]
      io.current_pc_out <= io.current_pc_in @[HazardDetectionUnit.scala 39:27]
      skip @[HazardDetectionUnit.scala 33:16]
    
  module TopModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip datain : UInt<32>, out : SInt<32>}
    
    inst fetch of fetch @[TopModule.scala 13:23]
    fetch.clock <= clock
    fetch.reset <= reset
    inst decode of decode @[TopModule.scala 14:24]
    decode.clock <= clock
    decode.reset <= reset
    inst execute of execute @[TopModule.scala 15:25]
    execute.clock <= clock
    execute.reset <= reset
    inst memory of memory @[TopModule.scala 16:24]
    memory.clock <= clock
    memory.reset <= reset
    inst WriteBack of Write_back @[TopModule.scala 17:27]
    WriteBack.clock <= clock
    WriteBack.reset <= reset
    inst forward of Forwarding @[TopModule.scala 18:25]
    forward.clock <= clock
    forward.reset <= reset
    inst hazard_detection of HazardDetectionUnit @[TopModule.scala 19:34]
    hazard_detection.clock <= clock
    hazard_detection.reset <= reset
    io.out <= asSInt(UInt<1>("h00")) @[TopModule.scala 20:11]
    reg ID_Exmem_wr_en : UInt<1>, clock @[TopModule.scala 22:29]
    reg ID_Exmem_r_en : UInt<1>, clock @[TopModule.scala 23:28]
    reg ID_Exbform : UInt<1>, clock @[TopModule.scala 24:25]
    reg ID_ExRegWr_en : UInt<1>, clock @[TopModule.scala 25:28]
    reg ID_Exwr_back : UInt<2>, clock @[TopModule.scala 26:27]
    reg ID_Exaluop : UInt<4>, clock @[TopModule.scala 27:25]
    reg ID_EXopA : UInt<2>, clock @[TopModule.scala 28:23]
    reg ID_EXopB : UInt<1>, clock @[TopModule.scala 29:23]
    reg ID_Expcsel : UInt<1>, clock @[TopModule.scala 30:25]
    reg ID_Exjalform : UInt<1>, clock @[TopModule.scala 31:27]
    reg ID_Exrform : UInt<1>, clock @[TopModule.scala 32:24]
    reg IF_IDins : UInt<32>, clock @[TopModule.scala 93:24]
    IF_IDins <= fetch.io.instruction @[TopModule.scala 94:13]
    decode.io.ins <= IF_IDins @[TopModule.scala 95:18]
    reg IF_IDpc : UInt<32>, clock @[TopModule.scala 96:22]
    IF_IDpc <= fetch.io.pc_out @[TopModule.scala 97:12]
    decode.io.pcout <= IF_IDpc @[TopModule.scala 98:20]
    reg IF_IDpc4 : UInt<32>, clock @[TopModule.scala 99:23]
    IF_IDpc4 <= fetch.io.pc4_out @[TopModule.scala 100:13]
    decode.io.pc4out <= IF_IDpc4 @[TopModule.scala 101:21]
    reg ID_Exiform : UInt<1>, clock @[TopModule.scala 104:25]
    ID_Exiform <= decode.io.iform @[TopModule.scala 105:15]
    execute.io.iform <= ID_Exiform @[TopModule.scala 106:21]
    ID_Exrform <= decode.io.rform @[TopModule.scala 108:15]
    execute.io.rform <= ID_Exrform @[TopModule.scala 109:21]
    reg ID_Exsform : UInt<1>, clock @[TopModule.scala 110:25]
    ID_Exsform <= decode.io.sform @[TopModule.scala 111:15]
    execute.io.sform <= ID_Exsform @[TopModule.scala 112:21]
    ID_Exbform <= decode.io.bform @[TopModule.scala 114:15]
    execute.io.bform <= ID_Exbform @[TopModule.scala 115:21]
    reg ID_Exluiform : UInt<1>, clock @[TopModule.scala 116:27]
    ID_Exluiform <= decode.io.luiform @[TopModule.scala 117:17]
    execute.io.luiform <= ID_Exluiform @[TopModule.scala 118:23]
    ID_Exjalform <= decode.io.Jalform @[TopModule.scala 120:17]
    execute.io.Jalform <= ID_Exjalform @[TopModule.scala 121:23]
    reg ID_Exjalrform : UInt<1>, clock @[TopModule.scala 122:28]
    ID_Exjalrform <= decode.io.jalrform @[TopModule.scala 123:18]
    execute.io.jalrform <= ID_Exjalrform @[TopModule.scala 124:24]
    reg ID_Exlform : UInt<1>, clock @[TopModule.scala 125:25]
    ID_Exlform <= decode.io.lform @[TopModule.scala 126:15]
    execute.io.lform <= ID_Exlform @[TopModule.scala 127:21]
    reg ID_ExAuipc : UInt<1>, clock @[TopModule.scala 128:25]
    ID_ExAuipc <= decode.io.Auipc @[TopModule.scala 129:15]
    execute.io.Auipc <= ID_ExAuipc @[TopModule.scala 130:21]
    reg ID_Exlui_jal_jalr_auipc_imm : SInt<32>, clock @[TopModule.scala 131:42]
    ID_Exlui_jal_jalr_auipc_imm <= decode.io.lui_jal_jalr_auipc_imm @[TopModule.scala 132:32]
    execute.io.lui_jal_jalr_auipc_imm <= ID_Exlui_jal_jalr_auipc_imm @[TopModule.scala 133:38]
    reg ID_EximmBits : UInt<12>, clock @[TopModule.scala 134:27]
    ID_EximmBits <= decode.io.immBits @[TopModule.scala 135:17]
    execute.io.immBits <= ID_EximmBits @[TopModule.scala 136:23]
    ID_Exmem_wr_en <= decode.io.mem_wr_en @[TopModule.scala 138:19]
    execute.io.mem_wr_en <= ID_Exmem_wr_en @[TopModule.scala 139:25]
    ID_Exwr_back <= decode.io.wr_back @[TopModule.scala 141:17]
    execute.io.wr_back <= ID_Exwr_back @[TopModule.scala 142:23]
    reg ID_Exbr_fun3 : UInt<3>, clock @[TopModule.scala 143:27]
    ID_Exbr_fun3 <= decode.io.br_fun3 @[TopModule.scala 144:17]
    execute.io.br_fun3 <= ID_Exbr_fun3 @[TopModule.scala 145:23]
    reg ID_Exload_storefun : UInt<3>, clock @[TopModule.scala 146:33]
    ID_Exload_storefun <= decode.io.load_storefun @[TopModule.scala 147:23]
    execute.io.load_storefun <= ID_Exload_storefun @[TopModule.scala 148:29]
    ID_Expcsel <= decode.io.pcsel @[TopModule.scala 150:15]
    execute.io.pcsel <= ID_Expcsel @[TopModule.scala 151:21]
    ID_Exmem_r_en <= decode.io.mem_r_en @[TopModule.scala 153:18]
    execute.io.mem_r_en <= ID_Exmem_r_en @[TopModule.scala 154:24]
    reg ID_EXpc4_out : UInt<32>, clock @[TopModule.scala 155:27]
    ID_EXpc4_out <= decode.io.pc_4out @[TopModule.scala 156:17]
    execute.io.pc4_out <= ID_EXpc4_out @[TopModule.scala 157:23]
    node _T = eq(forward.io.Fa, UInt<1>("h00")) @[TopModule.scala 166:24]
    when _T : @[TopModule.scala 166:33]
      reg ID_Exrs1 : SInt<32>, clock @[TopModule.scala 167:27]
      ID_Exrs1 <= decode.io.rs1 @[TopModule.scala 168:17]
      execute.io.rs1 <= ID_Exrs1 @[TopModule.scala 169:23]
      skip @[TopModule.scala 166:33]
    else : @[TopModule.scala 172:38]
      node _T_1 = eq(forward.io.Fa, UInt<1>("h01")) @[TopModule.scala 172:29]
      when _T_1 : @[TopModule.scala 172:38]
        execute.io.rs1 <= WriteBack.io.alu_out @[TopModule.scala 173:23]
        skip @[TopModule.scala 172:38]
      else : @[TopModule.scala 176:37]
        node _T_2 = eq(forward.io.Fa, UInt<2>("h02")) @[TopModule.scala 176:29]
        when _T_2 : @[TopModule.scala 176:37]
          reg ID_Exrs1_1 : SInt<32>, clock @[TopModule.scala 177:27]
          ID_Exrs1_1 <= execute.io.out @[TopModule.scala 178:17]
          execute.io.rs1 <= ID_Exrs1_1 @[TopModule.scala 179:23]
          skip @[TopModule.scala 176:37]
        else : @[TopModule.scala 181:15]
          reg ID_Exrs1_2 : SInt<32>, clock @[TopModule.scala 182:27]
          ID_Exrs1_2 <= decode.io.rs1 @[TopModule.scala 183:17]
          execute.io.rs1 <= ID_Exrs1_2 @[TopModule.scala 184:23]
          skip @[TopModule.scala 181:15]
    node _T_3 = eq(forward.io.Fb, UInt<1>("h00")) @[TopModule.scala 190:24]
    when _T_3 : @[TopModule.scala 190:32]
      reg ID_Exrs2 : SInt<32>, clock @[TopModule.scala 191:27]
      ID_Exrs2 <= decode.io.rs2 @[TopModule.scala 192:17]
      execute.io.rs2 <= ID_Exrs2 @[TopModule.scala 193:23]
      skip @[TopModule.scala 190:32]
    else : @[TopModule.scala 196:37]
      node _T_4 = eq(forward.io.Fb, UInt<1>("h01")) @[TopModule.scala 196:29]
      when _T_4 : @[TopModule.scala 196:37]
        execute.io.rs2 <= WriteBack.io.alu_out @[TopModule.scala 197:23]
        skip @[TopModule.scala 196:37]
      else : @[TopModule.scala 200:37]
        node _T_5 = eq(forward.io.Fb, UInt<2>("h02")) @[TopModule.scala 200:29]
        when _T_5 : @[TopModule.scala 200:37]
          reg ID_Exrs2_1 : SInt<32>, clock @[TopModule.scala 201:27]
          ID_Exrs2_1 <= execute.io.out @[TopModule.scala 202:17]
          execute.io.rs2 <= ID_Exrs2_1 @[TopModule.scala 203:23]
          skip @[TopModule.scala 200:37]
        else : @[TopModule.scala 205:15]
          reg ID_Exrs2_2 : SInt<32>, clock @[TopModule.scala 206:27]
          ID_Exrs2_2 <= decode.io.rs2 @[TopModule.scala 207:17]
          execute.io.rs2 <= ID_Exrs2_2 @[TopModule.scala 208:23]
          skip @[TopModule.scala 205:15]
    ID_Exaluop <= decode.io.aluop @[TopModule.scala 211:15]
    execute.io.aluop <= ID_Exaluop @[TopModule.scala 212:21]
    reg ID_Expc_out : UInt<32>, clock @[TopModule.scala 213:26]
    ID_Expc_out <= decode.io.pc_out @[TopModule.scala 214:16]
    execute.io.pc_out <= ID_Expc_out @[TopModule.scala 215:22]
    reg ID_Eximm_out : UInt<32>, clock @[TopModule.scala 216:27]
    ID_Eximm_out <= decode.io.imm_out @[TopModule.scala 217:17]
    execute.io.imm_out <= ID_Eximm_out @[TopModule.scala 218:23]
    reg ID_ExRS1 : UInt<5>, clock @[TopModule.scala 219:23]
    ID_ExRS1 <= decode.io.RS1 @[TopModule.scala 220:13]
    execute.io.RS1 <= ID_ExRS1 @[TopModule.scala 221:19]
    forward.io.IDEXrs1 <= ID_ExRS1 @[TopModule.scala 222:23]
    reg ID_ExRS2 : UInt<5>, clock @[TopModule.scala 223:23]
    ID_ExRS2 <= decode.io.RS2 @[TopModule.scala 224:13]
    execute.io.RS2 <= ID_ExRS2 @[TopModule.scala 225:19]
    forward.io.IDEXrs2 <= ID_ExRS2 @[TopModule.scala 226:23]
    reg ID_ExRd : UInt<5>, clock @[TopModule.scala 227:22]
    ID_ExRd <= decode.io.Rd @[TopModule.scala 228:13]
    execute.io.Rd <= ID_ExRd @[TopModule.scala 229:19]
    ID_ExRegWr_en <= decode.io.RegWr_en @[TopModule.scala 231:18]
    execute.io.RegWr_en <= ID_ExRegWr_en @[TopModule.scala 232:24]
    ID_EXopA <= decode.io.opAsel @[TopModule.scala 234:13]
    execute.io.opA_in <= ID_EXopA @[TopModule.scala 235:22]
    ID_EXopB <= decode.io.opBsel @[TopModule.scala 237:13]
    execute.io.opB_in <= ID_EXopB @[TopModule.scala 238:22]
    hazard_detection.io.IF_ID_instr <= decode.io.ins @[TopModule.scala 241:37]
    hazard_detection.io.ID_EX_memread <= execute.io.mem_r_en @[TopModule.scala 242:39]
    hazard_detection.io.ID_EX_rd <= execute.io.Rd @[TopModule.scala 243:34]
    hazard_detection.io.pc_in <= decode.io.pc4out @[TopModule.scala 244:31]
    hazard_detection.io.current_pc_in <= decode.io.pcout @[TopModule.scala 245:39]
    reg ExMemMemWen : UInt<1>, clock @[TopModule.scala 257:25]
    ExMemMemWen <= execute.io.MemWen @[TopModule.scala 258:16]
    memory.io.Wen <= ExMemMemWen @[TopModule.scala 259:18]
    reg ExMemFun3 : UInt<3>, clock @[TopModule.scala 260:24]
    ExMemFun3 <= execute.io.MemFun3 @[TopModule.scala 261:14]
    memory.io.Fun3 <= ExMemFun3 @[TopModule.scala 262:19]
    reg ExMemEnable : UInt<1>, clock @[TopModule.scala 263:26]
    ExMemEnable <= execute.io.MemEnable @[TopModule.scala 264:16]
    memory.io.Enable <= ExMemEnable @[TopModule.scala 265:21]
    reg ExMemDin : SInt<32>, clock @[TopModule.scala 266:24]
    ExMemDin <= execute.io.MemDin @[TopModule.scala 267:13]
    memory.io.Din <= ExMemDin @[TopModule.scala 268:18]
    reg ExMemToReg : UInt<2>, clock @[TopModule.scala 269:25]
    ExMemToReg <= execute.io.MemToReg @[TopModule.scala 270:15]
    memory.io.MemToReg <= ExMemToReg @[TopModule.scala 271:23]
    reg ExMemRDout : UInt<5>, clock @[TopModule.scala 272:25]
    ExMemRDout <= execute.io.RDout @[TopModule.scala 273:15]
    memory.io.RDout <= ExMemRDout @[TopModule.scala 274:20]
    forward.io.ExMemRd <= ExMemRDout @[TopModule.scala 275:23]
    reg ExMemRS2out : UInt<5>, clock @[TopModule.scala 276:25]
    ExMemRS2out <= execute.io.RS2out @[TopModule.scala 277:16]
    memory.io.RS2out <= ExMemRS2out @[TopModule.scala 278:21]
    reg ExMemRegWr_enout : UInt<1>, clock @[TopModule.scala 279:31]
    ExMemRegWr_enout <= execute.io.RegWr_enout @[TopModule.scala 280:21]
    memory.io.RegWr_enout <= ExMemRegWr_enout @[TopModule.scala 281:26]
    forward.io.ExMemRegWr_en <= ExMemRegWr_enout @[TopModule.scala 282:29]
    reg ExMempco : UInt<32>, clock @[TopModule.scala 283:23]
    ExMempco <= execute.io.pco @[TopModule.scala 284:13]
    memory.io.pco <= ExMempco @[TopModule.scala 285:18]
    reg ExMemout : SInt<32>, clock @[TopModule.scala 286:23]
    ExMemout <= execute.io.out @[TopModule.scala 287:13]
    memory.io.out <= ExMemout @[TopModule.scala 288:18]
    reg ExMembr_taken : UInt<1>, clock @[TopModule.scala 289:28]
    ExMembr_taken <= execute.io.br_taken @[TopModule.scala 290:18]
    memory.io.br_taken <= ExMembr_taken @[TopModule.scala 291:23]
    reg ExMembform : UInt<1>, clock @[TopModule.scala 292:25]
    ExMembform <= execute.io.b_form @[TopModule.scala 293:15]
    memory.io.bform <= ExMembform @[TopModule.scala 294:20]
    reg ExMempcsel : UInt<1>, clock @[TopModule.scala 295:25]
    ExMempcsel <= execute.io.pcselout @[TopModule.scala 296:15]
    memory.io.pcselout <= ExMempcsel @[TopModule.scala 297:23]
    reg MemWrbRegWr_enOut : UInt<1>, clock @[TopModule.scala 300:32]
    MemWrbRegWr_enOut <= memory.io.RegWr_enOut @[TopModule.scala 301:22]
    WriteBack.io.RegWr_enOut <= MemWrbRegWr_enOut @[TopModule.scala 302:29]
    forward.io.MemWbRegWr_en <= MemWrbRegWr_enOut @[TopModule.scala 303:29]
    reg MemWrbmemtoreg : UInt<2>, clock @[TopModule.scala 304:29]
    MemWrbmemtoreg <= memory.io.memtoreg @[TopModule.scala 305:19]
    WriteBack.io.memtoreg <= MemWrbmemtoreg @[TopModule.scala 306:26]
    reg MemWrbRDsel : UInt<5>, clock @[TopModule.scala 307:26]
    MemWrbRDsel <= memory.io.RDsel @[TopModule.scala 308:16]
    WriteBack.io.RDsel <= MemWrbRDsel @[TopModule.scala 309:23]
    forward.io.MemWbRd <= MemWrbRDsel @[TopModule.scala 310:23]
    reg MemWrbMemrd : UInt<1>, clock @[TopModule.scala 311:26]
    MemWrbMemrd <= memory.io.Memrd @[TopModule.scala 312:16]
    WriteBack.io.Memrd <= MemWrbMemrd @[TopModule.scala 313:23]
    reg MemWrbDout : SInt<32>, clock @[TopModule.scala 314:25]
    MemWrbDout <= memory.io.Dout @[TopModule.scala 315:15]
    WriteBack.io.Dout <= MemWrbDout @[TopModule.scala 316:22]
    reg MemWrbalu_out : SInt<32>, clock @[TopModule.scala 317:28]
    MemWrbalu_out <= memory.io.alu_out @[TopModule.scala 318:18]
    WriteBack.io.alu_out <= MemWrbalu_out @[TopModule.scala 319:25]
    reg MemWrbpcout : UInt<32>, clock @[TopModule.scala 320:26]
    MemWrbpcout <= memory.io.pcout @[TopModule.scala 321:16]
    WriteBack.io.pcout <= MemWrbpcout @[TopModule.scala 322:23]
    reg MemWrbbrtaken : UInt<1>, clock @[TopModule.scala 323:26]
    MemWrbbrtaken <= memory.io.brtaken @[TopModule.scala 324:18]
    WriteBack.io.brtaken <= MemWrbbrtaken @[TopModule.scala 325:25]
    reg MemWrbbform : UInt<1>, clock @[TopModule.scala 326:24]
    MemWrbbform <= memory.io.b_form @[TopModule.scala 327:16]
    WriteBack.io.bform <= MemWrbbform @[TopModule.scala 328:23]
    reg MemWrbpcsel : UInt<1>, clock @[TopModule.scala 329:26]
    MemWrbpcsel <= memory.io.pcsel @[TopModule.scala 330:16]
    WriteBack.io.pcsel <= MemWrbpcsel @[TopModule.scala 331:23]
    decode.io.btaken <= WriteBack.io.br_taken @[TopModule.scala 333:21]
    decode.io.wrbform <= WriteBack.io.b_form @[TopModule.scala 334:22]
    decode.io.Wrbrd <= WriteBack.io.RDselout @[TopModule.scala 335:20]
    decode.io.din <= WriteBack.io.Rd @[TopModule.scala 336:18]
    fetch.io.aluout <= WriteBack.io.aluout @[TopModule.scala 337:20]
    fetch.io.pcsel <= WriteBack.io.pcselout @[TopModule.scala 338:19]
    reg decode_io_RegWr_enWB_REG : UInt<1>, clock @[TopModule.scala 339:34]
    decode_io_RegWr_enWB_REG <= WriteBack.io.RegWr_enout @[TopModule.scala 339:34]
    decode.io.RegWr_enWB <= decode_io_RegWr_enWB_REG @[TopModule.scala 339:25]
    io.out <= decode.io.din @[TopModule.scala 343:12]
    
